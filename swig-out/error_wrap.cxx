/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _ERROR_H
#define _ERROR_H

#include <exception>
#include <string>
#include <cstring>
#include <sstream>
#include <list>


EXPORT void _wrap_error_context_desc_set (error_context *larg1, std::string *larg2) {
  error_context *arg1 = (error_context *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->desc = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_error_context_desc_get (error_context *larg1) {
  std::string * lresult = (std::string *)0 ;
  error_context *arg1 = (error_context *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->desc);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT error_context *_wrap_new_error_context (std::string *larg1) {
  error_context * lresult = (error_context *)0 ;
  std::string *arg1 = 0 ;
  error_context *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (error_context *)new error_context((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (error_context *)0;
  }
}


EXPORT void _wrap_delete_error_context (error_context *larg1) {
  error_context *arg1 = (error_context *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_error_context_describe (error_context *larg1, std::ostream *larg2) {
  error_context *arg1 = (error_context *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((error_context const *)arg1)->describe(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT file_context *_wrap_new_file_context__SWIG_0 (std::string *larg1, unsigned long larg2, std::string *larg3) {
  file_context * lresult = (file_context *)0 ;
  std::string *arg1 = 0 ;
  unsigned long arg2 ;
  std::string *arg3 = 0 ;
  file_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (file_context *)new file_context((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (file_context *)0;
  }
}


EXPORT file_context *_wrap_new_file_context__SWIG_1 (std::string *larg1, unsigned long larg2) {
  file_context * lresult = (file_context *)0 ;
  std::string *arg1 = 0 ;
  unsigned long arg2 ;
  file_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (file_context *)new file_context((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (file_context *)0;
  }
}


EXPORT void _wrap_delete_file_context (file_context *larg1) {
  file_context *arg1 = (file_context *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_file_context_describe (file_context *larg1, std::ostream *larg2) {
  file_context *arg1 = (file_context *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((file_context const *)arg1)->describe(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line_context_line_set (line_context *larg1, std::string *larg2) {
  line_context *arg1 = (line_context *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->line = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_line_context_line_get (line_context *larg1) {
  std::string * lresult = (std::string *)0 ;
  line_context *arg1 = (line_context *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->line);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_line_context_pos_set (line_context *larg1, long larg2) {
  line_context *arg1 = (line_context *) 0 ;
  long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pos = arg2;
    
  } catch (...) {
    
  }
}


EXPORT long _wrap_line_context_pos_get (line_context *larg1) {
  long lresult = (long)0 ;
  line_context *arg1 = (line_context *) 0 ;
  long result;
  
  arg1 = larg1;
  try {
    result = (long) ((arg1)->pos);
    lresult = result;
    return lresult;
  } catch (...) {
    return (long)0;
  }
}


EXPORT line_context *_wrap_new_line_context__SWIG_0 (std::string *larg1, long larg2, std::string *larg3) {
  line_context * lresult = (line_context *)0 ;
  std::string *arg1 = 0 ;
  long arg2 ;
  std::string *arg3 = 0 ;
  line_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (line_context *)new line_context((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line_context *)0;
  }
}


EXPORT line_context *_wrap_new_line_context__SWIG_1 (std::string *larg1, long larg2) {
  line_context * lresult = (line_context *)0 ;
  std::string *arg1 = 0 ;
  long arg2 ;
  line_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (line_context *)new line_context((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (line_context *)0;
  }
}


EXPORT void _wrap_delete_line_context (line_context *larg1) {
  line_context *arg1 = (line_context *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_line_context_describe (line_context *larg1, std::ostream *larg2) {
  line_context *arg1 = (line_context *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((line_context const *)arg1)->describe(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_str_exception_context_set (str_exception *larg1, std::list< error_context * > *larg2) {
  str_exception *arg1 = (str_exception *) 0 ;
  std::list< error_context * > *arg2 = (std::list< error_context * > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->context = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::list< error_context * > *_wrap_str_exception_context_get (str_exception *larg1) {
  std::list< error_context * > * lresult = (std::list< error_context * > *)0 ;
  str_exception *arg1 = (str_exception *) 0 ;
  std::list< error_context * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (std::list< error_context * > *)& ((arg1)->context);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::list< error_context * > *)0;
  }
}


EXPORT str_exception *_wrap_new_str_exception__SWIG_0 (std::string *larg1, error_context *larg2) {
  str_exception * lresult = (str_exception *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  str_exception *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (str_exception *)new str_exception((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (str_exception *)0;
  }
}


EXPORT str_exception *_wrap_new_str_exception__SWIG_1 (std::string *larg1) {
  str_exception * lresult = (str_exception *)0 ;
  std::string *arg1 = 0 ;
  str_exception *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (str_exception *)new str_exception((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (str_exception *)0;
  }
}


EXPORT void _wrap_delete_str_exception (str_exception *larg1) {
  str_exception *arg1 = (str_exception *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_str_exception_reveal_context (str_exception *larg1, std::ostream *larg2, std::string *larg3) {
  str_exception *arg1 = (str_exception *) 0 ;
  std::ostream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((str_exception const *)arg1)->reveal_context(*arg2,(std::string const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_str_exception_what (str_exception *larg1) {
  char * lresult = (char *)0 ;
  str_exception *arg1 = (str_exception *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)((str_exception const *)arg1)->what();
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT error *_wrap_new_error__SWIG_0 (std::string *larg1, error_context *larg2) {
  error * lresult = (error *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  error *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (error *)new error((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (error *)0;
  }
}


EXPORT error *_wrap_new_error__SWIG_1 (std::string *larg1) {
  error * lresult = (error *)0 ;
  std::string *arg1 = 0 ;
  error *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (error *)new error((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (error *)0;
  }
}


EXPORT void _wrap_delete_error (error *larg1) {
  error *arg1 = (error *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT fatal *_wrap_new_fatal__SWIG_0 (std::string *larg1, error_context *larg2) {
  fatal * lresult = (fatal *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  fatal *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (fatal *)new fatal((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (fatal *)0;
  }
}


EXPORT fatal *_wrap_new_fatal__SWIG_1 (std::string *larg1) {
  fatal * lresult = (fatal *)0 ;
  std::string *arg1 = 0 ;
  fatal *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (fatal *)new fatal((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (fatal *)0;
  }
}


EXPORT void _wrap_delete_fatal (fatal *larg1) {
  fatal *arg1 = (fatal *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT fatal_assert *_wrap_new_fatal_assert__SWIG_0 (std::string *larg1, error_context *larg2) {
  fatal_assert * lresult = (fatal_assert *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  fatal_assert *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (fatal_assert *)new fatal_assert((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (fatal_assert *)0;
  }
}


EXPORT fatal_assert *_wrap_new_fatal_assert__SWIG_1 (std::string *larg1) {
  fatal_assert * lresult = (fatal_assert *)0 ;
  std::string *arg1 = 0 ;
  fatal_assert *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (fatal_assert *)new fatal_assert((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (fatal_assert *)0;
  }
}


EXPORT void _wrap_delete_fatal_assert (fatal_assert *larg1) {
  fatal_assert *arg1 = (fatal_assert *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#endif // _ERROR_H
  
