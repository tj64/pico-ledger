;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant TRANSACTION_NORMAL #x0000)

(cl:defconstant TRANSACTION_VIRTUAL #x0001)

(cl:defconstant TRANSACTION_BALANCE #x0002)

(cl:defconstant TRANSACTION_AUTO #x0004)

(cl:defconstant TRANSACTION_BULK_ALLOC #x0008)

(cl:defconstant TRANSACTION_CALCULATED #x0010)

(cffi:defcenum state_t
	:UNCLEARED
	:CLEARED
	:PENDING)

(cffi:defcfun ("_wrap_transaction_t_entry_set" transaction_t_entry_set) :void
  (self :pointer)
  (entry :pointer))

(cffi:defcfun ("_wrap_transaction_t_entry_get" transaction_t_entry_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t__date_set" transaction_t__date_set) :void
  (self :pointer)
  (_date :pointer))

(cffi:defcfun ("_wrap_transaction_t__date_get" transaction_t__date_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t__date_eff_set" transaction_t__date_eff_set) :void
  (self :pointer)
  (_date_eff :pointer))

(cffi:defcfun ("_wrap_transaction_t__date_eff_get" transaction_t__date_eff_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_account_set" transaction_t_account_set) :void
  (self :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_transaction_t_account_get" transaction_t_account_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_amount_set" transaction_t_amount_set) :void
  (self :pointer)
  (amount :pointer))

(cffi:defcfun ("_wrap_transaction_t_amount_get" transaction_t_amount_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_amount_expr_set" transaction_t_amount_expr_set) :void
  (self :pointer)
  (amount_expr :pointer))

(cffi:defcfun ("_wrap_transaction_t_amount_expr_get" transaction_t_amount_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_cost_set" transaction_t_cost_set) :void
  (self :pointer)
  (cost :pointer))

(cffi:defcfun ("_wrap_transaction_t_cost_get" transaction_t_cost_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_cost_expr_set" transaction_t_cost_expr_set) :void
  (self :pointer)
  (cost_expr :pointer))

(cffi:defcfun ("_wrap_transaction_t_cost_expr_get" transaction_t_cost_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_state_set" transaction_t_state_set) :void
  (self :pointer)
  (state :pointer))

(cffi:defcfun ("_wrap_transaction_t_state_get" transaction_t_state_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_flags_set" transaction_t_flags_set) :void
  (self :pointer)
  (flags :unsigned-short))

(cffi:defcfun ("_wrap_transaction_t_flags_get" transaction_t_flags_get) :unsigned-short
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_note_set" transaction_t_note_set) :void
  (self :pointer)
  (note :pointer))

(cffi:defcfun ("_wrap_transaction_t_note_get" transaction_t_note_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_beg_pos_set" transaction_t_beg_pos_set) :void
  (self :pointer)
  (beg_pos :pointer))

(cffi:defcfun ("_wrap_transaction_t_beg_pos_get" transaction_t_beg_pos_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_beg_line_set" transaction_t_beg_line_set) :void
  (self :pointer)
  (beg_line :unsigned-long))

(cffi:defcfun ("_wrap_transaction_t_beg_line_get" transaction_t_beg_line_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_end_pos_set" transaction_t_end_pos_set) :void
  (self :pointer)
  (end_pos :pointer))

(cffi:defcfun ("_wrap_transaction_t_end_pos_get" transaction_t_end_pos_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_end_line_set" transaction_t_end_line_set) :void
  (self :pointer)
  (end_line :unsigned-long))

(cffi:defcfun ("_wrap_transaction_t_end_line_get" transaction_t_end_line_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_data_set" transaction_t_data_set) :void
  (self :pointer)
  (data :pointer))

(cffi:defcfun ("_wrap_transaction_t_data_get" transaction_t_data_get) :pointer
  (self :pointer))

(cffi:defcvar ("transaction_t_use_effective_date" transaction_t_use_effective_date)
 :pointer)

(cffi:defcfun ("_wrap_new_transaction_t__SWIG_0" new_transaction_t) :pointer
  (_account :pointer))

(cffi:defcfun ("_wrap_new_transaction_t__SWIG_1" new_transaction_t) :pointer)

(cffi:defcfun ("_wrap_new_transaction_t__SWIG_2" new_transaction_t) :pointer
  (_account :pointer)
  (_amount :pointer)
  (_flags :unsigned-int)
  (_note :pointer))

(cffi:defcfun ("_wrap_new_transaction_t__SWIG_3" new_transaction_t) :pointer
  (_account :pointer)
  (_amount :pointer)
  (_flags :unsigned-int))

(cffi:defcfun ("_wrap_new_transaction_t__SWIG_4" new_transaction_t) :pointer
  (_account :pointer)
  (_amount :pointer))

(cffi:defcfun ("_wrap_new_transaction_t__SWIG_5" new_transaction_t) :pointer
  (xact :pointer))

(cffi:defcfun ("_wrap_delete_transaction_t" delete_transaction_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_actual_date" transaction_t_actual_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_effective_date" transaction_t_effective_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t_date" transaction_t_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_transaction_t___eq__" transaction_t___eq__) :pointer
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_transaction_t___ne__" transaction_t___ne__) :pointer
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_transaction_t_valid" transaction_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_xact_context_xact_get" xact_context_xact_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_xact_context__SWIG_0" new_xact_context) :pointer
  (_xact :pointer)
  (desc :pointer))

(cffi:defcfun ("_wrap_new_xact_context__SWIG_1" new_xact_context) :pointer
  (_xact :pointer))

(cffi:defcfun ("_wrap_delete_xact_context" delete_xact_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_journal_set" entry_base_t_journal_set) :void
  (self :pointer)
  (journal :pointer))

(cffi:defcfun ("_wrap_entry_base_t_journal_get" entry_base_t_journal_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_src_idx_set" entry_base_t_src_idx_set) :void
  (self :pointer)
  (src_idx :unsigned-long))

(cffi:defcfun ("_wrap_entry_base_t_src_idx_get" entry_base_t_src_idx_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_beg_pos_set" entry_base_t_beg_pos_set) :void
  (self :pointer)
  (beg_pos :pointer))

(cffi:defcfun ("_wrap_entry_base_t_beg_pos_get" entry_base_t_beg_pos_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_beg_line_set" entry_base_t_beg_line_set) :void
  (self :pointer)
  (beg_line :unsigned-long))

(cffi:defcfun ("_wrap_entry_base_t_beg_line_get" entry_base_t_beg_line_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_end_pos_set" entry_base_t_end_pos_set) :void
  (self :pointer)
  (end_pos :pointer))

(cffi:defcfun ("_wrap_entry_base_t_end_pos_get" entry_base_t_end_pos_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_end_line_set" entry_base_t_end_line_set) :void
  (self :pointer)
  (end_line :unsigned-long))

(cffi:defcfun ("_wrap_entry_base_t_end_line_get" entry_base_t_end_line_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_transactions_set" entry_base_t_transactions_set) :void
  (self :pointer)
  (transactions :pointer))

(cffi:defcfun ("_wrap_entry_base_t_transactions_get" entry_base_t_transactions_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_delete_entry_base_t" delete_entry_base_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t___eq__" entry_base_t___eq__) :pointer
  (self :pointer)
  (entry :pointer))

(cffi:defcfun ("_wrap_entry_base_t___ne__" entry_base_t___ne__) :pointer
  (self :pointer)
  (entry :pointer))

(cffi:defcfun ("_wrap_entry_base_t_add_transaction" entry_base_t_add_transaction) :void
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_entry_base_t_remove_transaction" entry_base_t_remove_transaction) :pointer
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_entry_base_t_finalize" entry_base_t_finalize) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_base_t_valid" entry_base_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t__date_set" entry_t__date_set) :void
  (self :pointer)
  (_date :pointer))

(cffi:defcfun ("_wrap_entry_t__date_get" entry_t__date_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t__date_eff_set" entry_t__date_eff_set) :void
  (self :pointer)
  (_date_eff :pointer))

(cffi:defcfun ("_wrap_entry_t__date_eff_get" entry_t__date_eff_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_code_set" entry_t_code_set) :void
  (self :pointer)
  (code :pointer))

(cffi:defcfun ("_wrap_entry_t_code_get" entry_t_code_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_payee_set" entry_t_payee_set) :void
  (self :pointer)
  (payee :pointer))

(cffi:defcfun ("_wrap_entry_t_payee_get" entry_t_payee_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_entry_t__SWIG_0" new_entry_t) :pointer)

(cffi:defcfun ("_wrap_new_entry_t__SWIG_1" new_entry_t) :pointer
  (e :pointer))

(cffi:defcfun ("_wrap_delete_entry_t" delete_entry_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_actual_date" entry_t_actual_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_effective_date" entry_t_effective_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_date" entry_t_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_add_transaction" entry_t_add_transaction) :void
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_entry_t_valid" entry_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_entry_t_get_state" entry_t_get_state) :pointer
  (self :pointer)
  (state :pointer))

(cffi:defcstruct entry_finalizer_t
	(__funcall__ :pointer))

(cffi:defcfun ("_wrap_entry_context_entry_get" entry_context_entry_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_entry_context__SWIG_0" new_entry_context) :pointer
  (_entry :pointer)
  (desc :pointer))

(cffi:defcfun ("_wrap_new_entry_context__SWIG_1" new_entry_context) :pointer
  (_entry :pointer))

(cffi:defcfun ("_wrap_delete_entry_context" delete_entry_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_entry_context_describe" entry_context_describe) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_new_balance_error__SWIG_0" new_balance_error) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_balance_error__SWIG_1" new_balance_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_balance_error" delete_balance_error) :void
  (self :pointer))

(cffi:defcfun ("_wrap_auto_entry_t_predicate_set" auto_entry_t_predicate_set) :void
  (self :pointer)
  (predicate :pointer))

(cffi:defcfun ("_wrap_auto_entry_t_predicate_get" auto_entry_t_predicate_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_auto_entry_t_predicate_string_set" auto_entry_t_predicate_string_set) :void
  (self :pointer)
  (predicate_string :pointer))

(cffi:defcfun ("_wrap_auto_entry_t_predicate_string_get" auto_entry_t_predicate_string_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_auto_entry_t__SWIG_0" new_auto_entry_t) :pointer)

(cffi:defcfun ("_wrap_new_auto_entry_t__SWIG_1" new_auto_entry_t) :pointer
  (_predicate :pointer))

(cffi:defcfun ("_wrap_delete_auto_entry_t" delete_auto_entry_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_auto_entry_t_extend_entry" auto_entry_t_extend_entry) :void
  (self :pointer)
  (entry :pointer)
  (post :pointer))

(cffi:defcfun ("_wrap_auto_entry_t_valid" auto_entry_t_valid) :pointer
  (self :pointer))

(cffi:defcstruct auto_entry_finalizer_t
	(journal :pointer)
	(__funcall__ :pointer))

(cffi:defcfun ("_wrap_period_entry_t_period_set" period_entry_t_period_set) :void
  (self :pointer)
  (period :pointer))

(cffi:defcfun ("_wrap_period_entry_t_period_get" period_entry_t_period_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_period_entry_t_period_string_set" period_entry_t_period_string_set) :void
  (self :pointer)
  (period_string :pointer))

(cffi:defcfun ("_wrap_period_entry_t_period_string_get" period_entry_t_period_string_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_period_entry_t__SWIG_0" new_period_entry_t) :pointer)

(cffi:defcfun ("_wrap_new_period_entry_t__SWIG_1" new_period_entry_t) :pointer
  (_period :pointer))

(cffi:defcfun ("_wrap_new_period_entry_t__SWIG_2" new_period_entry_t) :pointer
  (e :pointer))

(cffi:defcfun ("_wrap_delete_period_entry_t" delete_period_entry_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_period_entry_t_valid" period_entry_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_journal_set" account_t_journal_set) :void
  (self :pointer)
  (journal :pointer))

(cffi:defcfun ("_wrap_account_t_journal_get" account_t_journal_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_parent_set" account_t_parent_set) :void
  (self :pointer)
  (parent :pointer))

(cffi:defcfun ("_wrap_account_t_parent_get" account_t_parent_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_name_set" account_t_name_set) :void
  (self :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_account_t_name_get" account_t_name_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_note_set" account_t_note_set) :void
  (self :pointer)
  (note :pointer))

(cffi:defcfun ("_wrap_account_t_note_get" account_t_note_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_depth_set" account_t_depth_set) :void
  (self :pointer)
  (depth :unsigned-short))

(cffi:defcfun ("_wrap_account_t_depth_get" account_t_depth_get) :unsigned-short
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_accounts_set" account_t_accounts_set) :void
  (self :pointer)
  (accounts :pointer))

(cffi:defcfun ("_wrap_account_t_accounts_get" account_t_accounts_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_data_set" account_t_data_set) :void
  (self :pointer)
  (data :pointer))

(cffi:defcfun ("_wrap_account_t_data_get" account_t_data_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_ident_set" account_t_ident_set) :void
  (self :pointer)
  (ident :unsigned-long))

(cffi:defcfun ("_wrap_account_t_ident_get" account_t_ident_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_account_t__fullname_set" account_t__fullname_set) :void
  (self :pointer)
  (_fullname :pointer))

(cffi:defcfun ("_wrap_account_t__fullname_get" account_t__fullname_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_0" new_account_t) :pointer
  (_parent :pointer)
  (_name :pointer)
  (_note :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_1" new_account_t) :pointer
  (_parent :pointer)
  (_name :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_2" new_account_t) :pointer
  (_parent :pointer))

(cffi:defcfun ("_wrap_new_account_t__SWIG_3" new_account_t) :pointer)

(cffi:defcfun ("_wrap_delete_account_t" delete_account_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_account_t___eq__" account_t___eq__) :pointer
  (self :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_account_t___ne__" account_t___ne__) :pointer
  (self :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_account_t_fullname" account_t_fullname) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_account_t_add_account" account_t_add_account) :void
  (self :pointer)
  (acct :pointer))

(cffi:defcfun ("_wrap_account_t_remove_account" account_t_remove_account) :pointer
  (self :pointer)
  (acct :pointer))

(cffi:defcfun ("_wrap_account_t_find_account__SWIG_0" account_t_find_account) :pointer
  (self :pointer)
  (name :pointer)
  (auto_create :pointer))

(cffi:defcfun ("_wrap_account_t_find_account__SWIG_1" account_t_find_account) :pointer
  (self :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_account_t_valid" account_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap___lshift__" __lshift__) :pointer
  (out :pointer)
  (account :pointer))

(cffi:defcstruct func_finalizer_t
	(func_t :pointer)
	(func :pointer)
	(__funcall__ :pointer))

(cffi:defcfun ("_wrap_journal_t_master_set" journal_t_master_set) :void
  (self :pointer)
  (master :pointer))

(cffi:defcfun ("_wrap_journal_t_master_get" journal_t_master_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_basket_set" journal_t_basket_set) :void
  (self :pointer)
  (basket :pointer))

(cffi:defcfun ("_wrap_journal_t_basket_get" journal_t_basket_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_entries_set" journal_t_entries_set) :void
  (self :pointer)
  (entries :pointer))

(cffi:defcfun ("_wrap_journal_t_entries_get" journal_t_entries_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_sources_set" journal_t_sources_set) :void
  (self :pointer)
  (sources :pointer))

(cffi:defcfun ("_wrap_journal_t_sources_get" journal_t_sources_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_price_db_set" journal_t_price_db_set) :void
  (self :pointer)
  (price_db :pointer))

(cffi:defcfun ("_wrap_journal_t_price_db_get" journal_t_price_db_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_item_pool_set" journal_t_item_pool_set) :void
  (self :pointer)
  (item_pool :string))

(cffi:defcfun ("_wrap_journal_t_item_pool_get" journal_t_item_pool_get) :string
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_item_pool_end_set" journal_t_item_pool_end_set) :void
  (self :pointer)
  (item_pool_end :string))

(cffi:defcfun ("_wrap_journal_t_item_pool_end_get" journal_t_item_pool_end_get) :string
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_auto_entries_set" journal_t_auto_entries_set) :void
  (self :pointer)
  (auto_entries :pointer))

(cffi:defcfun ("_wrap_journal_t_auto_entries_get" journal_t_auto_entries_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_period_entries_set" journal_t_period_entries_set) :void
  (self :pointer)
  (period_entries :pointer))

(cffi:defcfun ("_wrap_journal_t_period_entries_get" journal_t_period_entries_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_accounts_cache_set" journal_t_accounts_cache_set) :void
  (self :pointer)
  (accounts_cache :pointer))

(cffi:defcfun ("_wrap_journal_t_accounts_cache_get" journal_t_accounts_cache_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t_entry_finalize_hooks_set" journal_t_entry_finalize_hooks_set) :void
  (self :pointer)
  (entry_finalize_hooks :pointer))

(cffi:defcfun ("_wrap_journal_t_entry_finalize_hooks_get" journal_t_entry_finalize_hooks_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_journal_t" new_journal_t) :pointer)

(cffi:defcfun ("_wrap_delete_journal_t" delete_journal_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_journal_t___eq__" journal_t___eq__) :pointer
  (self :pointer)
  (journal :pointer))

(cffi:defcfun ("_wrap_journal_t___ne__" journal_t___ne__) :pointer
  (self :pointer)
  (journal :pointer))

(cffi:defcfun ("_wrap_journal_t_add_account" journal_t_add_account) :void
  (self :pointer)
  (acct :pointer))

(cffi:defcfun ("_wrap_journal_t_remove_account" journal_t_remove_account) :pointer
  (self :pointer)
  (acct :pointer))

(cffi:defcfun ("_wrap_journal_t_find_account__SWIG_0" journal_t_find_account) :pointer
  (self :pointer)
  (name :pointer)
  (auto_create :pointer))

(cffi:defcfun ("_wrap_journal_t_find_account__SWIG_1" journal_t_find_account) :pointer
  (self :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_journal_t_find_account_re" journal_t_find_account_re) :pointer
  (self :pointer)
  (regexp :pointer))

(cffi:defcfun ("_wrap_journal_t_add_entry" journal_t_add_entry) :pointer
  (self :pointer)
  (entry :pointer))

(cffi:defcfun ("_wrap_journal_t_remove_entry" journal_t_remove_entry) :pointer
  (self :pointer)
  (entry :pointer))

(cffi:defcfun ("_wrap_journal_t_add_entry_finalizer" journal_t_add_entry_finalizer) :void
  (self :pointer)
  (finalizer :pointer))

(cffi:defcfun ("_wrap_journal_t_remove_entry_finalizer" journal_t_remove_entry_finalizer) :void
  (self :pointer)
  (finalizer :pointer))

(cffi:defcfun ("_wrap_journal_t_valid" journal_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_extend_entry_base" extend_entry_base) :void
  (journal :pointer)
  (entry :pointer)
  (post :pointer))

(cffi:defcvar ("version" version)
 :pointer)


