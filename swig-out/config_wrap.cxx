/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _CONFIG_H
#define _CONFIG_H

#include "ledger.h"
#include "timing.h"

#include <iostream>
#include <memory>
#include <list>


EXPORT void _wrap_config_t_init_file_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->init_file = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_init_file_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->init_file);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_data_file_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->data_file = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_data_file_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->data_file);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_cache_file_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->cache_file = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_cache_file_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->cache_file);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_price_db_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->price_db = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_price_db_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->price_db);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_balance_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->balance_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_balance_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->balance_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_register_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->register_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_register_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->register_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_wide_register_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->wide_register_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_wide_register_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->wide_register_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_plot_amount_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->plot_amount_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_plot_amount_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->plot_amount_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_plot_total_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->plot_total_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_plot_total_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->plot_total_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_print_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->print_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_print_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->print_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_write_hdr_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->write_hdr_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_write_hdr_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->write_hdr_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_write_xact_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->write_xact_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_write_xact_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->write_xact_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_equity_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->equity_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_equity_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->equity_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_prices_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->prices_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_prices_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->prices_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_pricesdb_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->pricesdb_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_pricesdb_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->pricesdb_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_date_input_format_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->date_input_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_date_input_format_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->date_input_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_account_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->account = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_account_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->account);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_pager_set (ledger::config_t *larg1, std::string *larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->pager = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_config_t_pager_get (ledger::config_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->pager);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_config_t_pricing_leeway_set (ledger::config_t *larg1, unsigned long larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->pricing_leeway = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_config_t_pricing_leeway_get (ledger::config_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->pricing_leeway);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_config_t_download_quotes_set (ledger::config_t *larg1, int larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->download_quotes = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_config_t_download_quotes_get (ledger::config_t *larg1) {
  int lresult = (int)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->download_quotes);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_config_t_use_cache_set (ledger::config_t *larg1, int larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->use_cache = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_config_t_use_cache_get (ledger::config_t *larg1) {
  int lresult = (int)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->use_cache);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_config_t_cache_dirty_set (ledger::config_t *larg1, int larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->cache_dirty = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_config_t_cache_dirty_get (ledger::config_t *larg1) {
  int lresult = (int)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->cache_dirty);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_config_t_debug_mode_set (ledger::config_t *larg1, int larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->debug_mode = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_config_t_debug_mode_get (ledger::config_t *larg1) {
  int lresult = (int)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->debug_mode);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_config_t_verbose_mode_set (ledger::config_t *larg1, int larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->verbose_mode = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_config_t_verbose_mode_get (ledger::config_t *larg1) {
  int lresult = (int)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->verbose_mode);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_config_t_trace_mode_set (ledger::config_t *larg1, int larg2) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->trace_mode = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_config_t_trace_mode_get (ledger::config_t *larg1) {
  int lresult = (int)0 ;
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->trace_mode);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::config_t *_wrap_new_config_t () {
  ledger::config_t * lresult = (ledger::config_t *)0 ;
  ledger::config_t *result = 0 ;
  
  try {
    result = (ledger::config_t *)new ledger::config_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::config_t *)0;
  }
}


EXPORT void _wrap_delete_config_t (ledger::config_t *larg1) {
  ledger::config_t *arg1 = (ledger::config_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_resolve_path (std::string *larg1) {
  std::string * lresult = (std::string *)0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ledger::resolve_path((std::string const &)*arg1);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_trace (std::string *larg1, std::string *larg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::trace((std::string const &)*arg1,(std::string const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_trace_push (std::string *larg1, std::string *larg2, timing_t *larg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  timing_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ledger::trace_push((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_trace_pop (std::string *larg1, std::string *larg2, timing_t *larg3) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  timing_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ledger::trace_pop((std::string const &)*arg1,(std::string const &)*arg2,*arg3);
    
  } catch (...) {
    
  }
}



#endif // _CONFIG_H
  
