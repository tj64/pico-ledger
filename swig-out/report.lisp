;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_report_t_output_file_set" report_t_output_file_set) :void
  (self :pointer)
  (output_file :pointer))

(cffi:defcfun ("_wrap_report_t_output_file_get" report_t_output_file_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_predicate_set" report_t_predicate_set) :void
  (self :pointer)
  (predicate :pointer))

(cffi:defcfun ("_wrap_report_t_predicate_get" report_t_predicate_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_secondary_predicate_set" report_t_secondary_predicate_set) :void
  (self :pointer)
  (secondary_predicate :pointer))

(cffi:defcfun ("_wrap_report_t_secondary_predicate_get" report_t_secondary_predicate_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_display_predicate_set" report_t_display_predicate_set) :void
  (self :pointer)
  (display_predicate :pointer))

(cffi:defcfun ("_wrap_report_t_display_predicate_get" report_t_display_predicate_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_report_period_set" report_t_report_period_set) :void
  (self :pointer)
  (report_period :pointer))

(cffi:defcfun ("_wrap_report_t_report_period_get" report_t_report_period_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_report_period_sort_set" report_t_report_period_sort_set) :void
  (self :pointer)
  (report_period_sort :pointer))

(cffi:defcfun ("_wrap_report_t_report_period_sort_get" report_t_report_period_sort_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_format_string_set" report_t_format_string_set) :void
  (self :pointer)
  (format_string :pointer))

(cffi:defcfun ("_wrap_report_t_format_string_get" report_t_format_string_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_sort_string_set" report_t_sort_string_set) :void
  (self :pointer)
  (sort_string :pointer))

(cffi:defcfun ("_wrap_report_t_sort_string_get" report_t_sort_string_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_amount_expr_set" report_t_amount_expr_set) :void
  (self :pointer)
  (amount_expr :pointer))

(cffi:defcfun ("_wrap_report_t_amount_expr_get" report_t_amount_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_total_expr_set" report_t_total_expr_set) :void
  (self :pointer)
  (total_expr :pointer))

(cffi:defcfun ("_wrap_report_t_total_expr_get" report_t_total_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_descend_expr_set" report_t_descend_expr_set) :void
  (self :pointer)
  (descend_expr :pointer))

(cffi:defcfun ("_wrap_report_t_descend_expr_get" report_t_descend_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_forecast_limit_set" report_t_forecast_limit_set) :void
  (self :pointer)
  (forecast_limit :pointer))

(cffi:defcfun ("_wrap_report_t_forecast_limit_get" report_t_forecast_limit_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_reconcile_balance_set" report_t_reconcile_balance_set) :void
  (self :pointer)
  (reconcile_balance :pointer))

(cffi:defcfun ("_wrap_report_t_reconcile_balance_get" report_t_reconcile_balance_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_reconcile_date_set" report_t_reconcile_date_set) :void
  (self :pointer)
  (reconcile_date :pointer))

(cffi:defcfun ("_wrap_report_t_reconcile_date_get" report_t_reconcile_date_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_date_output_format_set" report_t_date_output_format_set) :void
  (self :pointer)
  (date_output_format :pointer))

(cffi:defcfun ("_wrap_report_t_date_output_format_get" report_t_date_output_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_budget_flags_set" report_t_budget_flags_set) :void
  (self :pointer)
  (budget_flags :unsigned-long))

(cffi:defcfun ("_wrap_report_t_budget_flags_get" report_t_budget_flags_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_head_entries_set" report_t_head_entries_set) :void
  (self :pointer)
  (head_entries :int))

(cffi:defcfun ("_wrap_report_t_head_entries_get" report_t_head_entries_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_tail_entries_set" report_t_tail_entries_set) :void
  (self :pointer)
  (tail_entries :int))

(cffi:defcfun ("_wrap_report_t_tail_entries_get" report_t_tail_entries_get) :int
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_collapsed_set" report_t_show_collapsed_set) :void
  (self :pointer)
  (show_collapsed :pointer))

(cffi:defcfun ("_wrap_report_t_show_collapsed_get" report_t_show_collapsed_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_subtotal_set" report_t_show_subtotal_set) :void
  (self :pointer)
  (show_subtotal :pointer))

(cffi:defcfun ("_wrap_report_t_show_subtotal_get" report_t_show_subtotal_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_totals_set" report_t_show_totals_set) :void
  (self :pointer)
  (show_totals :pointer))

(cffi:defcfun ("_wrap_report_t_show_totals_get" report_t_show_totals_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_related_set" report_t_show_related_set) :void
  (self :pointer)
  (show_related :pointer))

(cffi:defcfun ("_wrap_report_t_show_related_get" report_t_show_related_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_all_related_set" report_t_show_all_related_set) :void
  (self :pointer)
  (show_all_related :pointer))

(cffi:defcfun ("_wrap_report_t_show_all_related_get" report_t_show_all_related_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_inverted_set" report_t_show_inverted_set) :void
  (self :pointer)
  (show_inverted :pointer))

(cffi:defcfun ("_wrap_report_t_show_inverted_get" report_t_show_inverted_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_empty_set" report_t_show_empty_set) :void
  (self :pointer)
  (show_empty :pointer))

(cffi:defcfun ("_wrap_report_t_show_empty_get" report_t_show_empty_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_days_of_the_week_set" report_t_days_of_the_week_set) :void
  (self :pointer)
  (days_of_the_week :pointer))

(cffi:defcfun ("_wrap_report_t_days_of_the_week_get" report_t_days_of_the_week_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_by_payee_set" report_t_by_payee_set) :void
  (self :pointer)
  (by_payee :pointer))

(cffi:defcfun ("_wrap_report_t_by_payee_get" report_t_by_payee_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_comm_as_payee_set" report_t_comm_as_payee_set) :void
  (self :pointer)
  (comm_as_payee :pointer))

(cffi:defcfun ("_wrap_report_t_comm_as_payee_get" report_t_comm_as_payee_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_code_as_payee_set" report_t_code_as_payee_set) :void
  (self :pointer)
  (code_as_payee :pointer))

(cffi:defcfun ("_wrap_report_t_code_as_payee_get" report_t_code_as_payee_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_revalued_set" report_t_show_revalued_set) :void
  (self :pointer)
  (show_revalued :pointer))

(cffi:defcfun ("_wrap_report_t_show_revalued_get" report_t_show_revalued_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_show_revalued_only_set" report_t_show_revalued_only_set) :void
  (self :pointer)
  (show_revalued_only :pointer))

(cffi:defcfun ("_wrap_report_t_show_revalued_only_get" report_t_show_revalued_only_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_keep_price_set" report_t_keep_price_set) :void
  (self :pointer)
  (keep_price :pointer))

(cffi:defcfun ("_wrap_report_t_keep_price_get" report_t_keep_price_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_keep_date_set" report_t_keep_date_set) :void
  (self :pointer)
  (keep_date :pointer))

(cffi:defcfun ("_wrap_report_t_keep_date_get" report_t_keep_date_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_keep_tag_set" report_t_keep_tag_set) :void
  (self :pointer)
  (keep_tag :pointer))

(cffi:defcfun ("_wrap_report_t_keep_tag_get" report_t_keep_tag_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_entry_sort_set" report_t_entry_sort_set) :void
  (self :pointer)
  (entry_sort :pointer))

(cffi:defcfun ("_wrap_report_t_entry_sort_get" report_t_entry_sort_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_report_t_sort_all_set" report_t_sort_all_set) :void
  (self :pointer)
  (sort_all :pointer))

(cffi:defcfun ("_wrap_report_t_sort_all_get" report_t_sort_all_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_report_t" new_report_t) :pointer)

(cffi:defcfun ("_wrap_report_t_regexps_to_predicate__SWIG_0" report_t_regexps_to_predicate) :void
  (self :pointer)
  (command :pointer)
  (begin :pointer)
  (end :pointer)
  (account_regexp :pointer)
  (add_account_short_masks :pointer)
  (logical_and :pointer))

(cffi:defcfun ("_wrap_report_t_regexps_to_predicate__SWIG_1" report_t_regexps_to_predicate) :void
  (self :pointer)
  (command :pointer)
  (begin :pointer)
  (end :pointer)
  (account_regexp :pointer)
  (add_account_short_masks :pointer))

(cffi:defcfun ("_wrap_report_t_regexps_to_predicate__SWIG_2" report_t_regexps_to_predicate) :void
  (self :pointer)
  (command :pointer)
  (begin :pointer)
  (end :pointer)
  (account_regexp :pointer))

(cffi:defcfun ("_wrap_report_t_regexps_to_predicate__SWIG_3" report_t_regexps_to_predicate) :void
  (self :pointer)
  (command :pointer)
  (begin :pointer)
  (end :pointer))

(cffi:defcfun ("_wrap_report_t_process_options" report_t_process_options) :void
  (self :pointer)
  (command :pointer)
  (arg :pointer)
  (args_end :pointer))

(cffi:defcfun ("_wrap_report_t_chain_xact_handlers" report_t_chain_xact_handlers) :pointer
  (self :pointer)
  (command :pointer)
  (base_formatter :pointer)
  (journal :pointer)
  (master :pointer)
  (ptrs :pointer))

(cffi:defcfun ("_wrap_delete_report_t" delete_report_t) :void
  (self :pointer))


