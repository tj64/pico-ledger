/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _BALANCE_H
#define _BALANCE_H

#include "amount.h"

#include <map>
#include <iostream>


EXPORT void _wrap_balance_t_amounts_set (ledger::balance_t *larg1, ledger::amounts_map *larg2) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::amounts_map arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->amounts = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::amounts_map *_wrap_balance_t_amounts_get (ledger::balance_t *larg1) {
  ledger::amounts_map * lresult = (ledger::amounts_map *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::amounts_map result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->amounts);
    lresult = new ledger::amounts_map(result);
    return lresult;
  } catch (...) {
    return (ledger::amounts_map *)0;
  }
}


EXPORT int _wrap_balance_t_valid (ledger::balance_t *larg1) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::balance_t *_wrap_new_balance_t__SWIG_0 () {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *result = 0 ;
  
  try {
    result = (ledger::balance_t *)new ledger::balance_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_new_balance_t__SWIG_1 (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_t *)new ledger::balance_t((ledger::balance_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_new_balance_t__SWIG_2 (amount_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_t *)new ledger::balance_t((amount_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___assign____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator =((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___assign____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator =((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___add_assign____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator +=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___add_assign____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator +=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___sub_assign____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator -=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___sub_assign____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator -=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___add____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator +((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___add____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator +((amount_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___sub____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator -((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___sub____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator -((amount_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___mul_assign____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator *=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___mul_assign____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator *=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___div_assign____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator /=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___div_assign____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_t *) &(arg1)->operator /=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___mul____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator *((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___mul____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator *((amount_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___div____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator /((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___div____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->operator /((amount_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT int _wrap_balance_t___lt____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator <((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___lt____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator <((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___lte____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator <=((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___lte____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator <=((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___gt____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator >((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___gt____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator >((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___gte____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator >=((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___gte____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator >=((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___eq____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator ==((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___eq____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator ==((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___ne____SWIG_0 (ledger::balance_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator !=((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_t___ne____SWIG_1 (ledger::balance_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->operator !=((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_balance_t_negate (ledger::balance_t *larg1) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->negate();
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_negated (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->negated();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t___neg__ (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->operator -();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT int _wrap_balance_t_realzero (ledger::balance_t *larg1) {
  int lresult = (int)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::balance_t const *)arg1)->realzero();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT amount_t *_wrap_balance_t_amount__SWIG_0 (ledger::balance_t *larg1, commodity_t *larg2) {
  amount_t * lresult = (amount_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  commodity_t *arg2 = 0 ;
  amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->amount((commodity_t const &)*arg2);
    lresult = new amount_t(result);
    return lresult;
  } catch (...) {
    return (amount_t *)0;
  }
}


EXPORT amount_t *_wrap_balance_t_amount__SWIG_1 (ledger::balance_t *larg1) {
  amount_t * lresult = (amount_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->amount();
    lresult = new amount_t(result);
    return lresult;
  } catch (...) {
    return (amount_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_value__SWIG_0 (ledger::balance_t *larg1, datetime_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->value((datetime_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_value__SWIG_1 (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->value();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_price (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->price();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT datetime_t *_wrap_balance_t_date (ledger::balance_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_strip_annotations__SWIG_0 (ledger::balance_t *larg1, int larg2, int larg3, int larg4) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((ledger::balance_t const *)arg1)->strip_annotations(arg2,arg3,arg4);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_strip_annotations__SWIG_1 (ledger::balance_t *larg1, int larg2, int larg3) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((ledger::balance_t const *)arg1)->strip_annotations(arg2,arg3);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_strip_annotations__SWIG_2 (ledger::balance_t *larg1, int larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  bool arg2 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((ledger::balance_t const *)arg1)->strip_annotations(arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_strip_annotations__SWIG_3 (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->strip_annotations();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT void _wrap_balance_t_write__SWIG_0 (ledger::balance_t *larg1, std::ostream *larg2, int larg3, int larg4) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((ledger::balance_t const *)arg1)->write(*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_balance_t_write__SWIG_1 (ledger::balance_t *larg1, std::ostream *larg2, int larg3) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((ledger::balance_t const *)arg1)->write(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_balance_t_abs (ledger::balance_t *larg1) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->abs();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_balance_t_reduce (ledger::balance_t *larg1) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reduce();
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_reduced (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->reduced();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT void _wrap_balance_t_round (ledger::balance_t *larg1) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->round();
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_t *_wrap_balance_t_unround (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_t const *)arg1)->unround();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT void _wrap_delete_balance_t (ledger::balance_t *larg1) {
  ledger::balance_t *arg1 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_t *_wrap_abs__SWIG_0 (ledger::balance_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_t *arg1 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ledger::abs((ledger::balance_t const &)*arg1);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT std::ostream *_wrap___lshift____SWIG_0 (std::ostream *larg1, ledger::balance_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::balance_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}


EXPORT void _wrap_balance_pair_t_quantity_set (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->quantity = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_quantity_get (ledger::balance_pair_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_t *)& ((arg1)->quantity);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT void _wrap_balance_pair_t_cost_set (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = (ledger::balance_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->cost = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_cost_get (ledger::balance_pair_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_t *) ((arg1)->cost);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_new_balance_pair_t__SWIG_0 () {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *result = 0 ;
  
  try {
    result = (ledger::balance_pair_t *)new ledger::balance_pair_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_new_balance_pair_t__SWIG_1 (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_pair_t *)new ledger::balance_pair_t((ledger::balance_pair_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_new_balance_pair_t__SWIG_2 (ledger::balance_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_t *arg1 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_pair_t *)new ledger::balance_pair_t((ledger::balance_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_new_balance_pair_t__SWIG_3 (amount_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_pair_t *)new ledger::balance_pair_t((amount_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT void _wrap_delete_balance_pair_t (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___assign____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator =((ledger::balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___assign____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator =((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___assign____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator =((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___add_assign____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator +=((ledger::balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___add_assign____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator +=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___add_assign____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator +=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___sub_assign____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator -=((ledger::balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___sub_assign____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator -=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___sub_assign____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator -=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___add____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator +((ledger::balance_pair_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___add____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator +((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___add____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator +((amount_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___sub____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator -((ledger::balance_pair_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___sub____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator -((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___sub____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator -((amount_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___mul_assign____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator *=((ledger::balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___mul_assign____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator *=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___mul_assign____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator *=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___div_assign____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator /=((ledger::balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___div_assign____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator /=((ledger::balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___div_assign____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->operator /=((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___mul____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator *((ledger::balance_pair_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___mul____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator *((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___mul____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator *((amount_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___div____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator /((ledger::balance_pair_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___div____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator /((ledger::balance_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___div____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator /((amount_t const &)*arg2);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT int _wrap_balance_pair_t___lt____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator <((ledger::balance_pair_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___lt____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator <((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___lt____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator <((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___lte____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator <=((ledger::balance_pair_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___lte____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator <=((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___lte____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator <=((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___gt____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator >((ledger::balance_pair_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___gt____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator >((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___gt____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator >((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___gte____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator >=((ledger::balance_pair_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___gte____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator >=((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___gte____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator >=((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___eq____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator ==((ledger::balance_pair_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___eq____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator ==((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___eq____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator ==((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___ne____SWIG_0 (ledger::balance_pair_t *larg1, ledger::balance_pair_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator !=((ledger::balance_pair_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___ne____SWIG_1 (ledger::balance_pair_t *larg1, ledger::balance_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator !=((ledger::balance_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_balance_pair_t___ne____SWIG_2 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->operator !=((amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_balance_pair_t_negate (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->negate();
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t_negated (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->negated();
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t___neg__ (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->operator -();
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT int _wrap_balance_pair_t_realzero (ledger::balance_pair_t *larg1) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::balance_pair_t const *)arg1)->realzero();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_balance_pair_t_abs (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->abs();
    
  } catch (...) {
    
  }
}


EXPORT amount_t *_wrap_balance_pair_t_amount__SWIG_0 (ledger::balance_pair_t *larg1, commodity_t *larg2) {
  amount_t * lresult = (amount_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  commodity_t *arg2 = 0 ;
  amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->amount((commodity_t const &)*arg2);
    lresult = new amount_t(result);
    return lresult;
  } catch (...) {
    return (amount_t *)0;
  }
}


EXPORT amount_t *_wrap_balance_pair_t_amount__SWIG_1 (ledger::balance_pair_t *larg1) {
  amount_t * lresult = (amount_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->amount();
    lresult = new amount_t(result);
    return lresult;
  } catch (...) {
    return (amount_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_value__SWIG_0 (ledger::balance_pair_t *larg1, datetime_t *larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->value((datetime_t const &)*arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_value__SWIG_1 (ledger::balance_pair_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->value();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_price (ledger::balance_pair_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->price();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT datetime_t *_wrap_balance_pair_t_date (ledger::balance_pair_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_strip_annotations__SWIG_0 (ledger::balance_pair_t *larg1, int larg2, int larg3, int larg4) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->strip_annotations(arg2,arg3,arg4);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_strip_annotations__SWIG_1 (ledger::balance_pair_t *larg1, int larg2, int larg3) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->strip_annotations(arg2,arg3);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_strip_annotations__SWIG_2 (ledger::balance_pair_t *larg1, int larg2) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  bool arg2 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->strip_annotations(arg2);
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT ledger::balance_t *_wrap_balance_pair_t_strip_annotations__SWIG_3 (ledger::balance_pair_t *larg1) {
  ledger::balance_t * lresult = (ledger::balance_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->strip_annotations();
    lresult = new ledger::balance_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_t *)0;
  }
}


EXPORT void _wrap_balance_pair_t_write__SWIG_0 (ledger::balance_pair_t *larg1, std::ostream *larg2, int larg3, int larg4) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ((ledger::balance_pair_t const *)arg1)->write(*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_balance_pair_t_write__SWIG_1 (ledger::balance_pair_t *larg1, std::ostream *larg2, int larg3) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  std::ostream *arg2 = 0 ;
  int arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ((ledger::balance_pair_t const *)arg1)->write(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t_add__SWIG_0 (ledger::balance_pair_t *larg1, amount_t *larg2, amount_t *larg3) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  amount_t *arg3 = (amount_t *) 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->add((amount_t const &)*arg2,(amount_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t_add__SWIG_1 (ledger::balance_pair_t *larg1, amount_t *larg2) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::balance_pair_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_pair_t *) &(arg1)->add((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT int _wrap_balance_pair_t_valid (ledger::balance_pair_t *larg1) {
  int lresult = (int)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_balance_pair_t_reduce (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reduce();
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t_reduced (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::balance_pair_t const *)arg1)->reduced();
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT void _wrap_balance_pair_t_round (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->round();
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_pair_t *_wrap_balance_pair_t_unround (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = (ledger::balance_pair_t *) 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  try {
    result = (arg1)->unround();
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT ledger::balance_pair_t *_wrap_abs__SWIG_1 (ledger::balance_pair_t *larg1) {
  ledger::balance_pair_t * lresult = (ledger::balance_pair_t *)0 ;
  ledger::balance_pair_t *arg1 = 0 ;
  ledger::balance_pair_t result;
  
  arg1 = larg1;
  try {
    result = ledger::abs((ledger::balance_pair_t const &)*arg1);
    lresult = new ledger::balance_pair_t(result);
    return lresult;
  } catch (...) {
    return (ledger::balance_pair_t *)0;
  }
}


EXPORT std::ostream *_wrap___lshift____SWIG_1 (std::ostream *larg1, ledger::balance_pair_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::balance_pair_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}



#endif // _BALANCE_H
  
