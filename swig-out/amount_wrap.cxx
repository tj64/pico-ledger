/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _AMOUNT_H
#define _AMOUNT_H

#include <map>
#include <stack>
#include <string>
#include <memory>
#include <cctype>
#include <iostream>
#include <sstream>
#include <cassert>
#include <exception>

#include "datetime.h"
#include "debug.h"
#include "error.h"


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_0 () {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *result = 0 ;
  
  try {
    result = (ledger::amount_t *)new ledger::amount_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_1 (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t((ledger::amount_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_2 (std::string *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_3 (char *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  char *arg1 = (char *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_4 (int larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  bool arg1 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = (bool)larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_5 (long larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  long arg1 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_6 (unsigned long larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  unsigned long arg1 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_new_amount_t__SWIG_7 (double larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  double arg1 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)new ledger::amount_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_delete_amount_t (ledger::amount_t *larg1) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_t *_wrap_amount_t_commodity (ledger::amount_t *larg1) {
  ledger::commodity_t * lresult = (ledger::commodity_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::commodity_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_t *) &((ledger::amount_t const *)arg1)->commodity();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t *)0;
  }
}


EXPORT void _wrap_amount_t_set_commodity (ledger::amount_t *larg1, ledger::commodity_t *larg2) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::commodity_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_commodity(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_amount_t_annotate_commodity__SWIG_0 (ledger::amount_t *larg1, ledger::amount_t *larg2, datetime_t *larg3, std::string *larg4) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  datetime_t *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    (arg1)->annotate_commodity((ledger::amount_t const &)*arg2,(datetime_t const &)*arg3,(std::string const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_amount_t_annotate_commodity__SWIG_1 (ledger::amount_t *larg1, ledger::amount_t *larg2, datetime_t *larg3) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  datetime_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->annotate_commodity((ledger::amount_t const &)*arg2,(datetime_t const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_amount_t_annotate_commodity__SWIG_2 (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->annotate_commodity((ledger::amount_t const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_strip_annotations__SWIG_0 (ledger::amount_t *larg1, int larg2, int larg3, int larg4) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((ledger::amount_t const *)arg1)->strip_annotations(arg2,arg3,arg4);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_strip_annotations__SWIG_1 (ledger::amount_t *larg1, int larg2, int larg3) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((ledger::amount_t const *)arg1)->strip_annotations(arg2,arg3);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_strip_annotations__SWIG_2 (ledger::amount_t *larg1, int larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool arg2 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->strip_annotations(arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_strip_annotations__SWIG_3 (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->strip_annotations();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_amount_t_clear_commodity (ledger::amount_t *larg1) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->clear_commodity();
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_price (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->price();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT datetime_t *_wrap_amount_t_date (ledger::amount_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT int _wrap_amount_t_null (ledger::amount_t *larg1) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->null();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT std::string *_wrap_amount_t_quantity_string (ledger::amount_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->quantity_string();
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_0 (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =((ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_1 (ledger::amount_t *larg1, std::string *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::string *arg2 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =((std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_2 (ledger::amount_t *larg1, char *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  char *arg2 = (char *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_3 (ledger::amount_t *larg1, int larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool arg2 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_4 (ledger::amount_t *larg1, long larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  long arg2 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_5 (ledger::amount_t *larg1, unsigned long larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  unsigned long arg2 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___assign____SWIG_6 (ledger::amount_t *larg1, double larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  double arg2 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_round__SWIG_0 (ledger::amount_t *larg1, unsigned int larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  unsigned int arg2 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->round(arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_round__SWIG_1 (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->round();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_unround (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->unround();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___add_assign__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator +=((ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___sub_assign__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator -=((ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___mul_assign__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator *=((ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___div_assign__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::amount_t *) &(arg1)->operator /=((ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___add__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->operator +((ledger::amount_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___sub__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->operator -((ledger::amount_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___mul__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->operator *((ledger::amount_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___div__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->operator /((ledger::amount_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_amount_t_negate (ledger::amount_t *larg1) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->negate();
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_negated (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->negated();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t___neg__ (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->operator -();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT int _wrap_amount_t_realzero (ledger::amount_t *larg1) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->realzero();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t_compare (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  int result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (int)((ledger::amount_t const *)arg1)->compare((ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t___lt__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->operator <((ledger::amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t___lte__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->operator <=((ledger::amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t___gt__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->operator >((ledger::amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t___gte__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->operator >=((ledger::amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t___eq__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->operator ==((ledger::amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t___ne__ (ledger::amount_t *larg1, ledger::amount_t *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->operator !=((ledger::amount_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t_sign (ledger::amount_t *larg1) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int)((ledger::amount_t const *)arg1)->sign();
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_value (ledger::amount_t *larg1, datetime_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::amount_t const *)arg1)->value((datetime_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_amount_t_abs (ledger::amount_t *larg1) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->abs();
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_amount_t_parse__SWIG_0 (ledger::amount_t *larg1, std::istream *larg2, unsigned char larg3) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::istream *arg2 = 0 ;
  unsigned char arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->parse(*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t_parse__SWIG_1 (ledger::amount_t *larg1, std::istream *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->parse(*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t_parse__SWIG_2 (ledger::amount_t *larg1, std::string *larg2, unsigned char larg3) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::string *arg2 = 0 ;
  unsigned char arg3 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (bool)(arg1)->parse((std::string const &)*arg2,arg3);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_amount_t_parse__SWIG_3 (ledger::amount_t *larg1, std::string *larg2) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->parse((std::string const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_amount_t_reduce (ledger::amount_t *larg1) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reduce();
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_amount_t_reduced (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::amount_t const *)arg1)->reduced();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_amount_t_read_quantity__SWIG_0 (ledger::amount_t *larg1, char **larg2) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  char **arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->read_quantity(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_amount_t_read_quantity__SWIG_1 (ledger::amount_t *larg1, std::istream *larg2) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::istream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->read_quantity(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_amount_t_write_quantity (ledger::amount_t *larg1, std::ostream *larg2) {
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((ledger::amount_t const *)arg1)->write_quantity(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_amount_t_valid (ledger::amount_t *larg1) {
  int lresult = (int)0 ;
  ledger::amount_t *arg1 = (ledger::amount_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::amount_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT unsigned int _wrap_sizeof_bigint_t () {
  unsigned int lresult = (unsigned int)0 ;
  unsigned int result;
  
  try {
    result = (unsigned int)ledger::sizeof_bigint_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned int)0;
  }
}


EXPORT void _wrap_parse_quantity (std::istream *larg1, std::string *larg2) {
  std::istream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::parse_quantity(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_parse_commodity (std::istream *larg1, std::string *larg2) {
  std::istream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::parse_commodity(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_parse_annotations (std::istream *larg1, std::string *larg2, std::string *larg3, std::string *larg4, std::string *larg5, std::string *larg6) {
  std::istream *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    ledger::parse_annotations(*arg1,(std::string const &)*arg2,*arg3,*arg4,*arg5,*arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_parse_conversion (std::string *larg1, std::string *larg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::parse_conversion((std::string const &)*arg1,(std::string const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_is_quote_or_paren (char *larg1) {
  int lresult = (int)0 ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ledger::is_quote_or_paren(arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT char *_wrap_scan_past_quotes_and_parens (char *larg1) {
  char * lresult = (char *)0 ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)ledger::scan_past_quotes_and_parens(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT ledger::amount_t *_wrap_abs (ledger::amount_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::amount_t *arg1 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ledger::abs((ledger::amount_t const &)*arg1);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT std::ostream *_wrap___lshift____SWIG_0 (std::ostream *larg1, ledger::amount_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::amount_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}


EXPORT std::istream *_wrap___rshift__ (std::istream *larg1, ledger::amount_t *larg2) {
  std::istream * lresult = (std::istream *)0 ;
  std::istream *arg1 = 0 ;
  ledger::amount_t *arg2 = 0 ;
  std::istream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::istream *) &ledger::operator >>(*arg1,*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::istream *)0;
  }
}


EXPORT void _wrap_commodity_base_t_ident_set (ledger::commodity_base_t *larg1, ledger::commodity_base_t::ident_t larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::commodity_base_t::ident_t arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ident = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_base_t::ident_t _wrap_commodity_base_t_ident_get (ledger::commodity_base_t *larg1) {
  ledger::commodity_base_t::ident_t lresult = (ledger::commodity_base_t::ident_t)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::commodity_base_t::ident_t result;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_base_t::ident_t) ((arg1)->ident);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t::ident_t)0;
  }
}


EXPORT void _wrap_commodity_base_t_name_set (ledger::commodity_base_t *larg1, std::string *larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->name = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_commodity_base_t_name_get (ledger::commodity_base_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->name);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_base_t_note_set (ledger::commodity_base_t *larg1, std::string *larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->note = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_commodity_base_t_note_get (ledger::commodity_base_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->note);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_base_t_precision_set (ledger::commodity_base_t *larg1, unsigned char larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  unsigned char arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->precision = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned char _wrap_commodity_base_t_precision_get (ledger::commodity_base_t *larg1) {
  unsigned char lresult = (unsigned char)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  unsigned char result;
  
  arg1 = larg1;
  try {
    result = (unsigned char) ((arg1)->precision);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned char)0;
  }
}


EXPORT void _wrap_commodity_base_t_flags_set (ledger::commodity_base_t *larg1, unsigned char larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  unsigned char arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->flags = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned char _wrap_commodity_base_t_flags_get (ledger::commodity_base_t *larg1) {
  unsigned char lresult = (unsigned char)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  unsigned char result;
  
  arg1 = larg1;
  try {
    result = (unsigned char) ((arg1)->flags);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned char)0;
  }
}


EXPORT void _wrap_commodity_base_t_smaller_set (ledger::commodity_base_t *larg1, ledger::amount_t *larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::amount_t *arg2 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->smaller = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_commodity_base_t_smaller_get (ledger::commodity_base_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *) ((arg1)->smaller);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_commodity_base_t_larger_set (ledger::commodity_base_t *larg1, ledger::amount_t *larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::amount_t *arg2 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->larger = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_commodity_base_t_larger_get (ledger::commodity_base_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *) ((arg1)->larger);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::commodity_base_t *_wrap_new_commodity_base_t__SWIG_0 () {
  ledger::commodity_base_t * lresult = (ledger::commodity_base_t *)0 ;
  ledger::commodity_base_t *result = 0 ;
  
  try {
    result = (ledger::commodity_base_t *)new ledger::commodity_base_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t *)0;
  }
}


EXPORT ledger::commodity_base_t *_wrap_new_commodity_base_t__SWIG_1 (std::string *larg1, unsigned int larg2, unsigned int larg3) {
  ledger::commodity_base_t * lresult = (ledger::commodity_base_t *)0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  ledger::commodity_base_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::commodity_base_t *)new ledger::commodity_base_t((std::string const &)*arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t *)0;
  }
}


EXPORT ledger::commodity_base_t *_wrap_new_commodity_base_t__SWIG_2 (std::string *larg1, unsigned int larg2) {
  ledger::commodity_base_t * lresult = (ledger::commodity_base_t *)0 ;
  std::string *arg1 = 0 ;
  unsigned int arg2 ;
  ledger::commodity_base_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::commodity_base_t *)new ledger::commodity_base_t((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t *)0;
  }
}


EXPORT ledger::commodity_base_t *_wrap_new_commodity_base_t__SWIG_3 (std::string *larg1) {
  ledger::commodity_base_t * lresult = (ledger::commodity_base_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::commodity_base_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_base_t *)new ledger::commodity_base_t((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t *)0;
  }
}


EXPORT void _wrap_delete_commodity_base_t (ledger::commodity_base_t *larg1) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_base_t *_wrap_commodity_base_t_create (std::string *larg1) {
  ledger::commodity_base_t * lresult = (ledger::commodity_base_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::commodity_base_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_base_t *)ledger::commodity_base_t::create((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t *)0;
  }
}


EXPORT void _wrap_commodity_base_t_symbol_set (ledger::commodity_base_t *larg1, std::string *larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->symbol = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_commodity_base_t_symbol_get (ledger::commodity_base_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->symbol);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_base_t_history_set (ledger::commodity_base_t *larg1, ledger::commodity_base_t::history_t *larg2) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::commodity_base_t::history_t *arg2 = (ledger::commodity_base_t::history_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->history = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_base_t::history_t *_wrap_commodity_base_t_history_get (ledger::commodity_base_t *larg1) {
  ledger::commodity_base_t::history_t * lresult = (ledger::commodity_base_t::history_t *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::commodity_base_t::history_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_base_t::history_t *) ((arg1)->history);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t::history_t *)0;
  }
}


EXPORT void _wrap_commodity_base_t_add_price (ledger::commodity_base_t *larg1, datetime_t *larg2, ledger::amount_t *larg3) {
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::amount_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->add_price((datetime_t const &)*arg2,(ledger::amount_t const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_commodity_base_t_remove_price (ledger::commodity_base_t *larg1, datetime_t *larg2) {
  int lresult = (int)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  datetime_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_price((datetime_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::amount_t *_wrap_commodity_base_t_value__SWIG_0 (ledger::commodity_base_t *larg1, datetime_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->value((datetime_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_commodity_base_t_value__SWIG_1 (ledger::commodity_base_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_base_t *arg1 = (ledger::commodity_base_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = (arg1)->value();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::commodity_t *_wrap_commodity_t_create (std::string *larg1) {
  ledger::commodity_t * lresult = (ledger::commodity_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::commodity_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_t *)ledger::commodity_t::create((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t *)0;
  }
}


EXPORT ledger::commodity_t *_wrap_commodity_t_find (std::string *larg1) {
  ledger::commodity_t * lresult = (ledger::commodity_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::commodity_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_t *)ledger::commodity_t::find((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t *)0;
  }
}


EXPORT ledger::commodity_t *_wrap_commodity_t_find_or_create (std::string *larg1) {
  ledger::commodity_t * lresult = (ledger::commodity_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::commodity_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_t *)ledger::commodity_t::find_or_create((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t *)0;
  }
}


EXPORT int _wrap_commodity_t_needs_quotes (std::string *larg1) {
  int lresult = (int)0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ledger::commodity_t::needs_quotes((std::string const &)*arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_commodity_t_make_alias (std::string *larg1, ledger::commodity_t *larg2) {
  std::string *arg1 = 0 ;
  ledger::commodity_t *arg2 = (ledger::commodity_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::commodity_t::make_alias((std::string const &)*arg1,arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_commodity_t_ident_set (ledger::commodity_t *larg1, ledger::commodity_t::ident_t larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_t::ident_t arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ident = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_t::ident_t _wrap_commodity_t_ident_get (ledger::commodity_t *larg1) {
  ledger::commodity_t::ident_t lresult = (ledger::commodity_t::ident_t)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_t::ident_t result;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_t::ident_t) ((arg1)->ident);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t::ident_t)0;
  }
}


EXPORT void _wrap_commodity_t_base_set (ledger::commodity_t *larg1, ledger::commodity_base_t *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_base_t *arg2 = (ledger::commodity_base_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->base = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_base_t *_wrap_commodity_t_base_get (ledger::commodity_t *larg1) {
  ledger::commodity_base_t * lresult = (ledger::commodity_base_t *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_base_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_base_t *) ((arg1)->base);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t *)0;
  }
}


EXPORT void _wrap_commodity_t_qualified_symbol_set (ledger::commodity_t *larg1, std::string *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->qualified_symbol = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_commodity_t_qualified_symbol_get (ledger::commodity_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->qualified_symbol);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_t_annotated_set (ledger::commodity_t *larg1, int larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->annotated = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_commodity_t_annotated_get (ledger::commodity_t *larg1) {
  int lresult = (int)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->annotated);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::commodity_t *_wrap_new_commodity_t () {
  ledger::commodity_t * lresult = (ledger::commodity_t *)0 ;
  ledger::commodity_t *result = 0 ;
  
  try {
    result = (ledger::commodity_t *)new ledger::commodity_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t *)0;
  }
}


EXPORT void _wrap_delete_commodity_t (ledger::commodity_t *larg1) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_commodity_t___eq__ (ledger::commodity_t *larg1, ledger::commodity_t *larg2) {
  int lresult = (int)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::commodity_t const *)arg1)->operator ==((ledger::commodity_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_commodity_t___ne__ (ledger::commodity_t *larg1, ledger::commodity_t *larg2) {
  int lresult = (int)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::commodity_t const *)arg1)->operator !=((ledger::commodity_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT std::string *_wrap_commodity_t_base_symbol (ledger::commodity_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::commodity_t const *)arg1)->base_symbol();
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT std::string *_wrap_commodity_t_symbol (ledger::commodity_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::commodity_t const *)arg1)->symbol();
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_t_write (ledger::commodity_t *larg1, std::ostream *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((ledger::commodity_t const *)arg1)->write(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_commodity_t_name (ledger::commodity_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::commodity_t const *)arg1)->name();
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_t_set_name (ledger::commodity_t *larg1, std::string *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_name((std::string const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_commodity_t_note (ledger::commodity_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::commodity_t const *)arg1)->note();
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_commodity_t_set_note (ledger::commodity_t *larg1, std::string *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_note((std::string const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned char _wrap_commodity_t_precision (ledger::commodity_t *larg1) {
  unsigned char lresult = (unsigned char)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  unsigned char result;
  
  arg1 = larg1;
  try {
    result = (unsigned char)((ledger::commodity_t const *)arg1)->precision();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned char)0;
  }
}


EXPORT void _wrap_commodity_t_set_precision (ledger::commodity_t *larg1, unsigned char larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  unsigned char arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_precision(arg2);
    
  } catch (...) {
    
  }
}


EXPORT unsigned char _wrap_commodity_t_flags (ledger::commodity_t *larg1) {
  unsigned char lresult = (unsigned char)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  unsigned char result;
  
  arg1 = larg1;
  try {
    result = (unsigned char)((ledger::commodity_t const *)arg1)->flags();
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned char)0;
  }
}


EXPORT void _wrap_commodity_t_set_flags (ledger::commodity_t *larg1, unsigned char larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  unsigned char arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_flags(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_commodity_t_add_flags (ledger::commodity_t *larg1, unsigned char larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  unsigned char arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_flags(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_commodity_t_drop_flags (ledger::commodity_t *larg1, unsigned char larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  unsigned char arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->drop_flags(arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_commodity_t_smaller (ledger::commodity_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)((ledger::commodity_t const *)arg1)->smaller();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_commodity_t_set_smaller (ledger::commodity_t *larg1, ledger::amount_t *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_smaller((ledger::amount_t const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_commodity_t_larger (ledger::commodity_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)((ledger::commodity_t const *)arg1)->larger();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_commodity_t_set_larger (ledger::commodity_t *larg1, ledger::amount_t *larg2) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::amount_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->set_larger((ledger::amount_t const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_base_t::history_t *_wrap_commodity_t_history (ledger::commodity_t *larg1) {
  ledger::commodity_base_t::history_t * lresult = (ledger::commodity_base_t::history_t *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::commodity_base_t::history_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_base_t::history_t *)((ledger::commodity_t const *)arg1)->history();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_base_t::history_t *)0;
  }
}


EXPORT void _wrap_commodity_t_add_price (ledger::commodity_t *larg1, datetime_t *larg2, ledger::amount_t *larg3) {
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::amount_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->add_price((datetime_t const &)*arg2,(ledger::amount_t const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_commodity_t_remove_price (ledger::commodity_t *larg1, datetime_t *larg2) {
  int lresult = (int)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  datetime_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_price((datetime_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::amount_t *_wrap_commodity_t_value__SWIG_0 (ledger::commodity_t *larg1, datetime_t *larg2) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::commodity_t const *)arg1)->value((datetime_t const &)*arg2);
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT ledger::amount_t *_wrap_commodity_t_value__SWIG_1 (ledger::commodity_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  ledger::amount_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::commodity_t const *)arg1)->value();
    lresult = new ledger::amount_t(result);
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT int _wrap_commodity_t_valid (ledger::commodity_t *larg1) {
  int lresult = (int)0 ;
  ledger::commodity_t *arg1 = (ledger::commodity_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::commodity_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_annotated_commodity_t_ptr_set (ledger::annotated_commodity_t *larg1, ledger::commodity_t *larg2) {
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  ledger::commodity_t *arg2 = (ledger::commodity_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ptr = (ledger::commodity_t const *)arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::commodity_t *_wrap_annotated_commodity_t_ptr_get (ledger::annotated_commodity_t *larg1) {
  ledger::commodity_t * lresult = (ledger::commodity_t *)0 ;
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  ledger::commodity_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::commodity_t *) ((arg1)->ptr);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::commodity_t *)0;
  }
}


EXPORT void _wrap_annotated_commodity_t_price_set (ledger::annotated_commodity_t *larg1, ledger::amount_t *larg2) {
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  ledger::amount_t *arg2 = (ledger::amount_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->price = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::amount_t *_wrap_annotated_commodity_t_price_get (ledger::annotated_commodity_t *larg1) {
  ledger::amount_t * lresult = (ledger::amount_t *)0 ;
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  ledger::amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_t *)& ((arg1)->price);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_t *)0;
  }
}


EXPORT void _wrap_annotated_commodity_t_date_set (ledger::annotated_commodity_t *larg1, datetime_t *larg2) {
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->date = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_annotated_commodity_t_date_get (ledger::annotated_commodity_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->date);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_annotated_commodity_t_tag_set (ledger::annotated_commodity_t *larg1, std::string *larg2) {
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->tag = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_annotated_commodity_t_tag_get (ledger::annotated_commodity_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->tag);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT ledger::annotated_commodity_t *_wrap_new_annotated_commodity_t () {
  ledger::annotated_commodity_t * lresult = (ledger::annotated_commodity_t *)0 ;
  ledger::annotated_commodity_t *result = 0 ;
  
  try {
    result = (ledger::annotated_commodity_t *)new ledger::annotated_commodity_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::annotated_commodity_t *)0;
  }
}


EXPORT int _wrap_annotated_commodity_t___eq__ (ledger::annotated_commodity_t *larg1, ledger::commodity_t *larg2) {
  int lresult = (int)0 ;
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  ledger::commodity_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::annotated_commodity_t const *)arg1)->operator ==((ledger::commodity_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_annotated_commodity_t_write_annotations__SWIG_0 (ledger::annotated_commodity_t *larg1, std::ostream *larg2) {
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((ledger::annotated_commodity_t const *)arg1)->write_annotations(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_annotated_commodity_t_write_annotations__SWIG_1 (std::ostream *larg1, ledger::amount_t *larg2, datetime_t *larg3, std::string *larg4) {
  std::ostream *arg1 = 0 ;
  ledger::amount_t *arg2 = 0 ;
  datetime_t *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    ledger::annotated_commodity_t::write_annotations(*arg1,(ledger::amount_t const &)*arg2,(datetime_t const &)*arg3,(std::string const &)*arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_annotated_commodity_t (ledger::annotated_commodity_t *larg1) {
  ledger::annotated_commodity_t *arg1 = (ledger::annotated_commodity_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT std::ostream *_wrap___lshift____SWIG_1 (std::ostream *larg1, ledger::commodity_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::commodity_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::commodity_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}


EXPORT ledger::amount_error *_wrap_new_amount_error (std::string *larg1) {
  ledger::amount_error * lresult = (ledger::amount_error *)0 ;
  std::string *arg1 = 0 ;
  ledger::amount_error *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::amount_error *)new ledger::amount_error((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::amount_error *)0;
  }
}


EXPORT void _wrap_delete_amount_error (ledger::amount_error *larg1) {
  ledger::amount_error *arg1 = (ledger::amount_error *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#endif // _AMOUNT_H

