;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_textual_parser_t_test" textual_parser_t_test) :pointer
  (self :pointer)
  (in :pointer))

(cffi:defcfun ("_wrap_textual_parser_t_parse__SWIG_0" textual_parser_t_parse) :unsigned-int
  (self :pointer)
  (in :pointer)
  (config :pointer)
  (journal :pointer)
  (master :pointer)
  (original_file :pointer))

(cffi:defcfun ("_wrap_textual_parser_t_parse__SWIG_1" textual_parser_t_parse) :unsigned-int
  (self :pointer)
  (in :pointer)
  (config :pointer)
  (journal :pointer)
  (master :pointer))

(cffi:defcfun ("_wrap_textual_parser_t_parse__SWIG_2" textual_parser_t_parse) :unsigned-int
  (self :pointer)
  (in :pointer)
  (config :pointer)
  (journal :pointer))

(cffi:defcfun ("_wrap_new_textual_parser_t" new_textual_parser_t) :pointer)

(cffi:defcfun ("_wrap_delete_textual_parser_t" delete_textual_parser_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_parse_transaction_text" parse_transaction_text) :pointer
  (line :string)
  (account :pointer))

(cffi:defcfun ("_wrap_parse_transaction" parse_transaction) :pointer
  (in :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_write_textual_journal" write_textual_journal) :void
  (journal :pointer)
  (path :pointer)
  (formatter :pointer)
  (write_hdr_format :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_new_include_context__SWIG_0" new_include_context) :pointer
  (file :pointer)
  (line :unsigned-long)
  (desc :pointer))

(cffi:defcfun ("_wrap_new_include_context__SWIG_1" new_include_context) :pointer
  (file :pointer)
  (line :unsigned-long))

(cffi:defcfun ("_wrap_delete_include_context" delete_include_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_include_context_describe" include_context_describe) :void
  (self :pointer)
  (out :pointer))


