;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_config_t_init_file_set" config_t_init_file_set) :void
  (self :pointer)
  (init_file :pointer))

(cffi:defcfun ("_wrap_config_t_init_file_get" config_t_init_file_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_data_file_set" config_t_data_file_set) :void
  (self :pointer)
  (data_file :pointer))

(cffi:defcfun ("_wrap_config_t_data_file_get" config_t_data_file_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_cache_file_set" config_t_cache_file_set) :void
  (self :pointer)
  (cache_file :pointer))

(cffi:defcfun ("_wrap_config_t_cache_file_get" config_t_cache_file_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_price_db_set" config_t_price_db_set) :void
  (self :pointer)
  (price_db :pointer))

(cffi:defcfun ("_wrap_config_t_price_db_get" config_t_price_db_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_balance_format_set" config_t_balance_format_set) :void
  (self :pointer)
  (balance_format :pointer))

(cffi:defcfun ("_wrap_config_t_balance_format_get" config_t_balance_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_register_format_set" config_t_register_format_set) :void
  (self :pointer)
  (register_format :pointer))

(cffi:defcfun ("_wrap_config_t_register_format_get" config_t_register_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_wide_register_format_set" config_t_wide_register_format_set) :void
  (self :pointer)
  (wide_register_format :pointer))

(cffi:defcfun ("_wrap_config_t_wide_register_format_get" config_t_wide_register_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_plot_amount_format_set" config_t_plot_amount_format_set) :void
  (self :pointer)
  (plot_amount_format :pointer))

(cffi:defcfun ("_wrap_config_t_plot_amount_format_get" config_t_plot_amount_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_plot_total_format_set" config_t_plot_total_format_set) :void
  (self :pointer)
  (plot_total_format :pointer))

(cffi:defcfun ("_wrap_config_t_plot_total_format_get" config_t_plot_total_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_print_format_set" config_t_print_format_set) :void
  (self :pointer)
  (print_format :pointer))

(cffi:defcfun ("_wrap_config_t_print_format_get" config_t_print_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_write_hdr_format_set" config_t_write_hdr_format_set) :void
  (self :pointer)
  (write_hdr_format :pointer))

(cffi:defcfun ("_wrap_config_t_write_hdr_format_get" config_t_write_hdr_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_write_xact_format_set" config_t_write_xact_format_set) :void
  (self :pointer)
  (write_xact_format :pointer))

(cffi:defcfun ("_wrap_config_t_write_xact_format_get" config_t_write_xact_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_equity_format_set" config_t_equity_format_set) :void
  (self :pointer)
  (equity_format :pointer))

(cffi:defcfun ("_wrap_config_t_equity_format_get" config_t_equity_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_prices_format_set" config_t_prices_format_set) :void
  (self :pointer)
  (prices_format :pointer))

(cffi:defcfun ("_wrap_config_t_prices_format_get" config_t_prices_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_pricesdb_format_set" config_t_pricesdb_format_set) :void
  (self :pointer)
  (pricesdb_format :pointer))

(cffi:defcfun ("_wrap_config_t_pricesdb_format_get" config_t_pricesdb_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_date_input_format_set" config_t_date_input_format_set) :void
  (self :pointer)
  (date_input_format :pointer))

(cffi:defcfun ("_wrap_config_t_date_input_format_get" config_t_date_input_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_account_set" config_t_account_set) :void
  (self :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_config_t_account_get" config_t_account_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_pager_set" config_t_pager_set) :void
  (self :pointer)
  (pager :pointer))

(cffi:defcfun ("_wrap_config_t_pager_get" config_t_pager_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_pricing_leeway_set" config_t_pricing_leeway_set) :void
  (self :pointer)
  (pricing_leeway :unsigned-long))

(cffi:defcfun ("_wrap_config_t_pricing_leeway_get" config_t_pricing_leeway_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_download_quotes_set" config_t_download_quotes_set) :void
  (self :pointer)
  (download_quotes :pointer))

(cffi:defcfun ("_wrap_config_t_download_quotes_get" config_t_download_quotes_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_use_cache_set" config_t_use_cache_set) :void
  (self :pointer)
  (use_cache :pointer))

(cffi:defcfun ("_wrap_config_t_use_cache_get" config_t_use_cache_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_cache_dirty_set" config_t_cache_dirty_set) :void
  (self :pointer)
  (cache_dirty :pointer))

(cffi:defcfun ("_wrap_config_t_cache_dirty_get" config_t_cache_dirty_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_debug_mode_set" config_t_debug_mode_set) :void
  (self :pointer)
  (debug_mode :pointer))

(cffi:defcfun ("_wrap_config_t_debug_mode_get" config_t_debug_mode_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_verbose_mode_set" config_t_verbose_mode_set) :void
  (self :pointer)
  (verbose_mode :pointer))

(cffi:defcfun ("_wrap_config_t_verbose_mode_get" config_t_verbose_mode_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_config_t_trace_mode_set" config_t_trace_mode_set) :void
  (self :pointer)
  (trace_mode :pointer))

(cffi:defcfun ("_wrap_config_t_trace_mode_get" config_t_trace_mode_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_config_t" new_config_t) :pointer)

(cffi:defcfun ("_wrap_delete_config_t" delete_config_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_resolve_path" resolve_path) :pointer
  (path :pointer))

(cffi:defcfun ("_wrap_trace" trace) :void
  (cat :pointer)
  (str :pointer))

(cffi:defcfun ("_wrap_trace_push" trace_push) :void
  (cat :pointer)
  (str :pointer)
  (timer :pointer))

(cffi:defcfun ("_wrap_trace_pop" trace_pop) :void
  (cat :pointer)
  (str :pointer)
  (timer :pointer))


