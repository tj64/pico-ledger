;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcvar ("do_cleanup" do_cleanup)
 :pointer)

(cffi:defcvar ("amount_t_keep_price" amount_t_keep_price)
 :pointer)

(cffi:defcvar ("amount_t_keep_date" amount_t_keep_date)
 :pointer)

(cffi:defcvar ("amount_t_keep_tag" amount_t_keep_tag)
 :pointer)

(cffi:defcvar ("amount_t_keep_base" amount_t_keep_base)
 :pointer)

(cffi:defcfun ("_wrap_new_amount_t__SWIG_0" new_amount_t) :pointer)

(cffi:defcfun ("_wrap_new_amount_t__SWIG_1" new_amount_t) :pointer
  (amt :pointer))

(cffi:defcfun ("_wrap_new_amount_t__SWIG_2" new_amount_t) :pointer
  (value :pointer))

(cffi:defcfun ("_wrap_new_amount_t__SWIG_3" new_amount_t) :pointer
  (value :string))

(cffi:defcfun ("_wrap_new_amount_t__SWIG_4" new_amount_t) :pointer
  (value :pointer))

(cffi:defcfun ("_wrap_new_amount_t__SWIG_5" new_amount_t) :pointer
  (value :long))

(cffi:defcfun ("_wrap_new_amount_t__SWIG_6" new_amount_t) :pointer
  (value :unsigned-long))

(cffi:defcfun ("_wrap_new_amount_t__SWIG_7" new_amount_t) :pointer
  (value :double))

(cffi:defcfun ("_wrap_delete_amount_t" delete_amount_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_commodity" amount_t_commodity) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_set_commodity" amount_t_set_commodity) :void
  (self :pointer)
  (comm :pointer))

(cffi:defcfun ("_wrap_amount_t_annotate_commodity__SWIG_0" amount_t_annotate_commodity) :void
  (self :pointer)
  (price :pointer)
  (date :pointer)
  (tag :pointer))

(cffi:defcfun ("_wrap_amount_t_annotate_commodity__SWIG_1" amount_t_annotate_commodity) :void
  (self :pointer)
  (price :pointer)
  (date :pointer))

(cffi:defcfun ("_wrap_amount_t_annotate_commodity__SWIG_2" amount_t_annotate_commodity) :void
  (self :pointer)
  (price :pointer))

(cffi:defcfun ("_wrap_amount_t_strip_annotations__SWIG_0" amount_t_strip_annotations) :pointer
  (self :pointer)
  (_keep_price :pointer)
  (_keep_date :pointer)
  (_keep_tag :pointer))

(cffi:defcfun ("_wrap_amount_t_strip_annotations__SWIG_1" amount_t_strip_annotations) :pointer
  (self :pointer)
  (_keep_price :pointer)
  (_keep_date :pointer))

(cffi:defcfun ("_wrap_amount_t_strip_annotations__SWIG_2" amount_t_strip_annotations) :pointer
  (self :pointer)
  (_keep_price :pointer))

(cffi:defcfun ("_wrap_amount_t_strip_annotations__SWIG_3" amount_t_strip_annotations) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_clear_commodity" amount_t_clear_commodity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_price" amount_t_price) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_date" amount_t_date) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_null" amount_t_null) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_quantity_string" amount_t_quantity_string) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_0" amount_t___assign__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_1" amount_t___assign__) :pointer
  (self :pointer)
  (value :pointer))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_2" amount_t___assign__) :pointer
  (self :pointer)
  (value :string))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_3" amount_t___assign__) :pointer
  (self :pointer)
  (value :pointer))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_4" amount_t___assign__) :pointer
  (self :pointer)
  (value :long))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_5" amount_t___assign__) :pointer
  (self :pointer)
  (value :unsigned-long))

(cffi:defcfun ("_wrap_amount_t___assign____SWIG_6" amount_t___assign__) :pointer
  (self :pointer)
  (value :double))

(cffi:defcfun ("_wrap_amount_t_round__SWIG_0" amount_t_round) :pointer
  (self :pointer)
  (prec :unsigned-int))

(cffi:defcfun ("_wrap_amount_t_round__SWIG_1" amount_t_round) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_unround" amount_t_unround) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t___add_assign__" amount_t___add_assign__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___sub_assign__" amount_t___sub_assign__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___mul_assign__" amount_t___mul_assign__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___div_assign__" amount_t___div_assign__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___add__" amount_t___add__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___sub__" amount_t___sub__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___mul__" amount_t___mul__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___div__" amount_t___div__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t_negate" amount_t_negate) :void
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_negated" amount_t_negated) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t___neg__" amount_t___neg__) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_realzero" amount_t_realzero) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_compare" amount_t_compare) :int
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___lt__" amount_t___lt__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___lte__" amount_t___lte__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___gt__" amount_t___gt__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___gte__" amount_t___gte__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___eq__" amount_t___eq__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t___ne__" amount_t___ne__) :pointer
  (self :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap_amount_t_sign" amount_t_sign) :int
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_value" amount_t_value) :pointer
  (self :pointer)
  (moment :pointer))

(cffi:defcfun ("_wrap_amount_t_abs" amount_t_abs) :void
  (self :pointer))

(cl:defconstant AMOUNT_PARSE_NO_MIGRATE #x01)

(cl:defconstant AMOUNT_PARSE_NO_REDUCE #x02)

(cl:defconstant AMOUNT_PARSE_SOFT_FAIL #x04)

(cffi:defcfun ("_wrap_amount_t_parse__SWIG_0" amount_t_parse) :pointer
  (self :pointer)
  (in :pointer)
  (flags :unsigned-char))

(cffi:defcfun ("_wrap_amount_t_parse__SWIG_1" amount_t_parse) :pointer
  (self :pointer)
  (in :pointer))

(cffi:defcfun ("_wrap_amount_t_parse__SWIG_2" amount_t_parse) :pointer
  (self :pointer)
  (str :pointer)
  (flags :unsigned-char))

(cffi:defcfun ("_wrap_amount_t_parse__SWIG_3" amount_t_parse) :pointer
  (self :pointer)
  (str :pointer))

(cffi:defcfun ("_wrap_amount_t_reduce" amount_t_reduce) :void
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_reduced" amount_t_reduced) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_amount_t_read_quantity__SWIG_0" amount_t_read_quantity) :void
  (self :pointer)
  (data :pointer))

(cffi:defcfun ("_wrap_amount_t_read_quantity__SWIG_1" amount_t_read_quantity) :void
  (self :pointer)
  (in :pointer))

(cffi:defcfun ("_wrap_amount_t_write_quantity" amount_t_write_quantity) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_amount_t_valid" amount_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_sizeof_bigint_t" sizeof_bigint_t) :unsigned-int)

(cffi:defcfun ("_wrap_parse_quantity" parse_quantity) :void
  (in :pointer)
  (value :pointer))

(cffi:defcfun ("_wrap_parse_commodity" parse_commodity) :void
  (in :pointer)
  (symbol :pointer))

(cffi:defcfun ("_wrap_parse_annotations" parse_annotations) :void
  (in :pointer)
  (symbol :pointer)
  (name :pointer)
  (price :pointer)
  (date :pointer)
  (tag :pointer))

(cffi:defcfun ("_wrap_parse_conversion" parse_conversion) :void
  (larger :pointer)
  (smaller :pointer))

(cffi:defcfun ("_wrap_is_quote_or_paren" is_quote_or_paren) :pointer
  (p :string))

(cffi:defcfun ("_wrap_scan_past_quotes_and_parens" scan_past_quotes_and_parens) :string
  (expr :string))

(cffi:defcfun ("_wrap_abs" abs) :pointer
  (amt :pointer))

(cffi:defcfun ("_wrap___lshift____SWIG_0" __lshift__) :pointer
  (out :pointer)
  (amt :pointer))

(cffi:defcfun ("_wrap___rshift__" __rshift__) :pointer
  (in :pointer)
  (amt :pointer))

(cl:defconstant COMMODITY_STYLE_DEFAULTS #x0000)

(cl:defconstant COMMODITY_STYLE_SUFFIXED #x0001)

(cl:defconstant COMMODITY_STYLE_SEPARATED #x0002)

(cl:defconstant COMMODITY_STYLE_EUROPEAN #x0004)

(cl:defconstant COMMODITY_STYLE_THOUSANDS #x0008)

(cl:defconstant COMMODITY_STYLE_NOMARKET #x0010)

(cl:defconstant COMMODITY_STYLE_BUILTIN #x0020)

(cffi:defcfun ("_wrap_commodity_base_t_ident_set" commodity_base_t_ident_set) :void
  (self :pointer)
  (ident :unsigned-long))

(cffi:defcfun ("_wrap_commodity_base_t_ident_get" commodity_base_t_ident_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_name_set" commodity_base_t_name_set) :void
  (self :pointer)
  (name :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_name_get" commodity_base_t_name_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_note_set" commodity_base_t_note_set) :void
  (self :pointer)
  (note :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_note_get" commodity_base_t_note_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_precision_set" commodity_base_t_precision_set) :void
  (self :pointer)
  (precision :unsigned-char))

(cffi:defcfun ("_wrap_commodity_base_t_precision_get" commodity_base_t_precision_get) :unsigned-char
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_flags_set" commodity_base_t_flags_set) :void
  (self :pointer)
  (flags :unsigned-char))

(cffi:defcfun ("_wrap_commodity_base_t_flags_get" commodity_base_t_flags_get) :unsigned-char
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_smaller_set" commodity_base_t_smaller_set) :void
  (self :pointer)
  (smaller :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_smaller_get" commodity_base_t_smaller_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_larger_set" commodity_base_t_larger_set) :void
  (self :pointer)
  (larger :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_larger_get" commodity_base_t_larger_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_commodity_base_t__SWIG_0" new_commodity_base_t) :pointer)

(cffi:defcfun ("_wrap_new_commodity_base_t__SWIG_1" new_commodity_base_t) :pointer
  (_symbol :pointer)
  (_precision :unsigned-int)
  (_flags :unsigned-int))

(cffi:defcfun ("_wrap_new_commodity_base_t__SWIG_2" new_commodity_base_t) :pointer
  (_symbol :pointer)
  (_precision :unsigned-int))

(cffi:defcfun ("_wrap_new_commodity_base_t__SWIG_3" new_commodity_base_t) :pointer
  (_symbol :pointer))

(cffi:defcfun ("_wrap_delete_commodity_base_t" delete_commodity_base_t) :void
  (self :pointer))

(cffi:defcvar ("commodity_base_t_commodities" commodity_base_t_commodities)
 :pointer)

(cffi:defcfun ("_wrap_commodity_base_t_create" commodity_base_t_create) :pointer
  (symbol :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_symbol_set" commodity_base_t_symbol_set) :void
  (self :pointer)
  (symbol :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_symbol_get" commodity_base_t_symbol_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_history_set" commodity_base_t_history_set) :void
  (self :pointer)
  (history :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_history_get" commodity_base_t_history_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_add_price" commodity_base_t_add_price) :void
  (self :pointer)
  (date :pointer)
  (price :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_remove_price" commodity_base_t_remove_price) :pointer
  (self :pointer)
  (date :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_value__SWIG_0" commodity_base_t_value) :pointer
  (self :pointer)
  (moment :pointer))

(cffi:defcfun ("_wrap_commodity_base_t_value__SWIG_1" commodity_base_t_value) :pointer
  (self :pointer))

(cffi:defcvar ("commodity_base_t_updater" commodity_base_t_updater)
 :pointer)

(cffi:defcvar ("commodity_t_commodities" commodity_t_commodities)
 :pointer)

(cffi:defcvar ("commodity_t_commodities_sorted" commodity_t_commodities_sorted)
 :pointer)

(cffi:defcvar ("commodity_t_null_commodity" commodity_t_null_commodity)
 :pointer)

(cffi:defcvar ("commodity_t_default_commodity" commodity_t_default_commodity)
 :pointer)

(cffi:defcfun ("_wrap_commodity_t_create" commodity_t_create) :pointer
  (symbol :pointer))

(cffi:defcfun ("_wrap_commodity_t_find" commodity_t_find) :pointer
  (name :pointer))

(cffi:defcfun ("_wrap_commodity_t_find_or_create" commodity_t_find_or_create) :pointer
  (symbol :pointer))

(cffi:defcfun ("_wrap_commodity_t_needs_quotes" commodity_t_needs_quotes) :pointer
  (symbol :pointer))

(cffi:defcfun ("_wrap_commodity_t_make_alias" commodity_t_make_alias) :void
  (symbol :pointer)
  (commodity :pointer))

(cffi:defcfun ("_wrap_commodity_t_ident_set" commodity_t_ident_set) :void
  (self :pointer)
  (ident :unsigned-long))

(cffi:defcfun ("_wrap_commodity_t_ident_get" commodity_t_ident_get) :unsigned-long
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_base_set" commodity_t_base_set) :void
  (self :pointer)
  (base :pointer))

(cffi:defcfun ("_wrap_commodity_t_base_get" commodity_t_base_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_qualified_symbol_set" commodity_t_qualified_symbol_set) :void
  (self :pointer)
  (qualified_symbol :pointer))

(cffi:defcfun ("_wrap_commodity_t_qualified_symbol_get" commodity_t_qualified_symbol_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_annotated_set" commodity_t_annotated_set) :void
  (self :pointer)
  (annotated :pointer))

(cffi:defcfun ("_wrap_commodity_t_annotated_get" commodity_t_annotated_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_commodity_t" new_commodity_t) :pointer)

(cffi:defcfun ("_wrap_delete_commodity_t" delete_commodity_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t___eq__" commodity_t___eq__) :pointer
  (self :pointer)
  (comm :pointer))

(cffi:defcfun ("_wrap_commodity_t___ne__" commodity_t___ne__) :pointer
  (self :pointer)
  (comm :pointer))

(cffi:defcfun ("_wrap_commodity_t_base_symbol" commodity_t_base_symbol) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_symbol" commodity_t_symbol) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_write" commodity_t_write) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_commodity_t_name" commodity_t_name) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_set_name" commodity_t_set_name) :void
  (self :pointer)
  (arg :pointer))

(cffi:defcfun ("_wrap_commodity_t_note" commodity_t_note) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_set_note" commodity_t_set_note) :void
  (self :pointer)
  (arg :pointer))

(cffi:defcfun ("_wrap_commodity_t_precision" commodity_t_precision) :unsigned-char
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_set_precision" commodity_t_set_precision) :void
  (self :pointer)
  (arg :unsigned-char))

(cffi:defcfun ("_wrap_commodity_t_flags" commodity_t_flags) :unsigned-char
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_set_flags" commodity_t_set_flags) :void
  (self :pointer)
  (arg :unsigned-char))

(cffi:defcfun ("_wrap_commodity_t_add_flags" commodity_t_add_flags) :void
  (self :pointer)
  (arg :unsigned-char))

(cffi:defcfun ("_wrap_commodity_t_drop_flags" commodity_t_drop_flags) :void
  (self :pointer)
  (arg :unsigned-char))

(cffi:defcfun ("_wrap_commodity_t_smaller" commodity_t_smaller) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_set_smaller" commodity_t_set_smaller) :void
  (self :pointer)
  (arg :pointer))

(cffi:defcfun ("_wrap_commodity_t_larger" commodity_t_larger) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_set_larger" commodity_t_set_larger) :void
  (self :pointer)
  (arg :pointer))

(cffi:defcfun ("_wrap_commodity_t_history" commodity_t_history) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_add_price" commodity_t_add_price) :void
  (self :pointer)
  (date :pointer)
  (price :pointer))

(cffi:defcfun ("_wrap_commodity_t_remove_price" commodity_t_remove_price) :pointer
  (self :pointer)
  (date :pointer))

(cffi:defcfun ("_wrap_commodity_t_value__SWIG_0" commodity_t_value) :pointer
  (self :pointer)
  (moment :pointer))

(cffi:defcfun ("_wrap_commodity_t_value__SWIG_1" commodity_t_value) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_commodity_t_valid" commodity_t_valid) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_ptr_set" annotated_commodity_t_ptr_set) :void
  (self :pointer)
  (ptr :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_ptr_get" annotated_commodity_t_ptr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_price_set" annotated_commodity_t_price_set) :void
  (self :pointer)
  (price :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_price_get" annotated_commodity_t_price_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_date_set" annotated_commodity_t_date_set) :void
  (self :pointer)
  (date :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_date_get" annotated_commodity_t_date_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_tag_set" annotated_commodity_t_tag_set) :void
  (self :pointer)
  (tag :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_tag_get" annotated_commodity_t_tag_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_annotated_commodity_t" new_annotated_commodity_t) :pointer)

(cffi:defcfun ("_wrap_annotated_commodity_t___eq__" annotated_commodity_t___eq__) :pointer
  (self :pointer)
  (comm :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_write_annotations__SWIG_0" annotated_commodity_t_write_annotations) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_annotated_commodity_t_write_annotations__SWIG_1" annotated_commodity_t_write_annotations) :void
  (out :pointer)
  (price :pointer)
  (date :pointer)
  (tag :pointer))

(cffi:defcfun ("_wrap_delete_annotated_commodity_t" delete_annotated_commodity_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap___lshift____SWIG_1" __lshift__) :pointer
  (out :pointer)
  (comm :pointer))

(cffi:defcfun ("_wrap_new_amount_error" new_amount_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_amount_error" delete_amount_error) :void
  (self :pointer))

(cffi:defcstruct compare_amount_commodities
	(__funcall__ :pointer))


