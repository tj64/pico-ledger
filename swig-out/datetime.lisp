;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_new_date_error" new_date_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_date_error" delete_date_error) :void
  (self :pointer))

(cffi:defcvar ("date_t_now" date_t_now)
 :pointer)

(cffi:defcvar ("date_t_formats" date_t_formats)
 :pointer)

(cffi:defcvar ("date_t_current_year" date_t_current_year)
 :int)

(cffi:defcvar ("date_t_input_format" date_t_input_format)
 :pointer)

(cffi:defcvar ("date_t_output_format" date_t_output_format)
 :pointer)

(cffi:defcfun ("_wrap_date_t_when_set" date_t_when_set) :void
  (self :pointer)
  (when :pointer))

(cffi:defcfun ("_wrap_date_t_when_get" date_t_when_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_date_t__SWIG_0" new_date_t) :pointer)

(cffi:defcfun ("_wrap_new_date_t__SWIG_1" new_date_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_new_date_t__SWIG_2" new_date_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_new_date_t__SWIG_3" new_date_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_new_date_t__SWIG_4" new_date_t) :pointer
  (period :pointer))

(cffi:defcfun ("_wrap_new_date_t__SWIG_5" new_date_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_delete_date_t" delete_date_t) :void
  (self :pointer))

(cffi:defcfun ("_wrap_date_t___assign____SWIG_0" date_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_date_t___assign____SWIG_1" date_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_date_t___assign____SWIG_2" date_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_date_t___assign____SWIG_3" date_t___assign__) :pointer
  (self :pointer)
  (period :pointer))

(cffi:defcfun ("_wrap_date_t___assign____SWIG_4" date_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_date_t___add_assign____SWIG_0" date_t___add_assign__) :pointer
  (self :pointer)
  (period :pointer))

(cffi:defcfun ("_wrap_date_t___sub_assign____SWIG_0" date_t___sub_assign__) :long
  (self :pointer)
  (date :pointer))

(cffi:defcfun ("_wrap_date_t___add_assign____SWIG_1" date_t___add_assign__) :pointer
  (self :pointer)
  (days :long))

(cffi:defcfun ("_wrap_date_t___sub_assign____SWIG_1" date_t___sub_assign__) :pointer
  (self :pointer)
  (days :long))

(cffi:defcfun ("_wrap_date_t___lt__" date_t___lt__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_date_t___lte__" date_t___lte__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_date_t___gt__" date_t___gt__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_date_t___gte__" date_t___gte__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_date_t___eq__" date_t___eq__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_date_t___ne__" date_t___ne__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_date_t_to_string__SWIG_0" date_t_to_string) :pointer
  (self :pointer)
  (format :pointer))

(cffi:defcfun ("_wrap_date_t_to_string__SWIG_1" date_t_to_string) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_date_t_year" date_t_year) :int
  (self :pointer))

(cffi:defcfun ("_wrap_date_t_month" date_t_month) :int
  (self :pointer))

(cffi:defcfun ("_wrap_date_t_day" date_t_day) :int
  (self :pointer))

(cffi:defcfun ("_wrap_date_t_wday" date_t_wday) :int
  (self :pointer))

(cffi:defcfun ("_wrap_date_t_localtime" date_t_localtime) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_date_t_write__SWIG_0" date_t_write) :void
  (self :pointer)
  (out :pointer)
  (format :pointer))

(cffi:defcfun ("_wrap_date_t_write__SWIG_1" date_t_write) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_new_datetime_error" new_datetime_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_datetime_error" delete_datetime_error) :void
  (self :pointer))

(cffi:defcvar ("datetime_t_now" datetime_t_now)
 :pointer)

(cffi:defcfun ("_wrap_new_datetime_t__SWIG_0" new_datetime_t) :pointer)

(cffi:defcfun ("_wrap_new_datetime_t__SWIG_1" new_datetime_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_new_datetime_t__SWIG_2" new_datetime_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_new_datetime_t__SWIG_3" new_datetime_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_new_datetime_t__SWIG_4" new_datetime_t) :pointer
  (_when :pointer))

(cffi:defcfun ("_wrap_datetime_t___assign____SWIG_0" datetime_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_datetime_t___assign____SWIG_1" datetime_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_datetime_t___assign____SWIG_2" datetime_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_datetime_t___assign____SWIG_3" datetime_t___assign__) :pointer
  (self :pointer)
  (_when :pointer))

(cffi:defcfun ("_wrap_datetime_t___sub_assign____SWIG_0" datetime_t___sub_assign__) :long
  (self :pointer)
  (date :pointer))

(cffi:defcfun ("_wrap_datetime_t___add_assign__" datetime_t___add_assign__) :pointer
  (self :pointer)
  (secs :long))

(cffi:defcfun ("_wrap_datetime_t___sub_assign____SWIG_1" datetime_t___sub_assign__) :pointer
  (self :pointer)
  (secs :long))

(cffi:defcfun ("_wrap_datetime_t___lt__" datetime_t___lt__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_datetime_t___lte__" datetime_t___lte__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_datetime_t___gt__" datetime_t___gt__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_datetime_t___gte__" datetime_t___gte__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_datetime_t___eq__" datetime_t___eq__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_datetime_t___ne__" datetime_t___ne__) :pointer
  (self :pointer)
  (other :pointer))

(cffi:defcfun ("_wrap_datetime_t_hour" datetime_t_hour) :int
  (self :pointer))

(cffi:defcfun ("_wrap_datetime_t_min" datetime_t_min) :int
  (self :pointer))

(cffi:defcfun ("_wrap_datetime_t_sec" datetime_t_sec) :int
  (self :pointer))

(cffi:defcfun ("_wrap_delete_datetime_t" delete_datetime_t) :void
  (self :pointer))

(cffi:defcstruct interval_t
	(years :int)
	(months :int)
	(days :int)
	(hours :int)
	(minutes :int)
	(seconds :int)
	(begin :pointer)
	(end :pointer)
	(operator bool :pointer)
	(start :pointer)
	(first :pointer)
	(first :pointer)
	(increment :pointer)
	(parse :pointer))


