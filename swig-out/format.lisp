;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_truncated__SWIG_0" truncated) :pointer
  (str :pointer)
  (width :unsigned-int)
  (style :int))

(cffi:defcfun ("_wrap_truncated__SWIG_1" truncated) :pointer
  (str :pointer)
  (width :unsigned-int))

(cffi:defcfun ("_wrap_partial_account_name" partial_account_name) :pointer
  (account :pointer)
  (start_depth :unsigned-int))

(cl:defconstant ELEMENT_ALIGN_LEFT #x01)

(cl:defconstant ELEMENT_HIGHLIGHT #x02)

(cffi:defcstruct element_t
	(type :pointer)
	(flags :unsigned-char)
	(chars :pointer)
	(min_width :unsigned-char)
	(max_width :unsigned-char)
	(val_expr :pointer)
	(next :pointer))

(cffi:defcstruct format_t
	(format_string :pointer)
	(elements :pointer)
	(elision_style :pointer)
	(abbrev_length :int)
	(ansi_codes :pointer)
	(ansi_invert :pointer)
	(reset :pointer)
	(parse_elements :pointer)
	(truncate :pointer)
	(truncate :pointer)
	(format :pointer))

(cffi:defcfun ("_wrap_new_format_transactions" new_format_transactions) :pointer
  (_output_stream :pointer)
  (format :pointer))

(cffi:defcfun ("_wrap_format_transactions_flush" format_transactions_flush) :void
  (self :pointer))

(cffi:defcfun ("_wrap_format_transactions___funcall__" format_transactions___funcall__) :void
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_delete_format_transactions" delete_format_transactions) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_format_entries" new_format_entries) :pointer
  (output_stream :pointer)
  (format :pointer))

(cffi:defcfun ("_wrap_format_entries_format_last_entry" format_entries_format_last_entry) :void
  (self :pointer))

(cffi:defcfun ("_wrap_format_entries_flush" format_entries_flush) :void
  (self :pointer))

(cffi:defcfun ("_wrap_format_entries___funcall__" format_entries___funcall__) :void
  (self :pointer)
  (xact :pointer))

(cffi:defcfun ("_wrap_delete_format_entries" delete_format_entries) :void
  (self :pointer))

(cffi:defcfun ("_wrap_print_entry__SWIG_0" print_entry) :void
  (out :pointer)
  (entry :pointer)
  (prefix :pointer))

(cffi:defcfun ("_wrap_print_entry__SWIG_1" print_entry) :void
  (out :pointer)
  (entry :pointer))

(cffi:defcfun ("_wrap_disp_subaccounts_p__SWIG_0" disp_subaccounts_p) :pointer
  (account :pointer)
  (disp_pred :pointer)
  (to_show :pointer))

(cffi:defcfun ("_wrap_disp_subaccounts_p__SWIG_1" disp_subaccounts_p) :pointer
  (account :pointer))

(cffi:defcfun ("_wrap_display_account" display_account) :pointer
  (account :pointer)
  (disp_pred :pointer))

(cffi:defcfun ("_wrap_format_account_format_set" format_account_format_set) :void
  (self :pointer)
  (format :pointer))

(cffi:defcfun ("_wrap_format_account_format_get" format_account_format_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_format_account__SWIG_0" new_format_account) :pointer
  (_output_stream :pointer)
  (_format :pointer)
  (display_predicate :pointer))

(cffi:defcfun ("_wrap_new_format_account__SWIG_1" new_format_account) :pointer
  (_output_stream :pointer)
  (_format :pointer))

(cffi:defcfun ("_wrap_format_account_flush" format_account_flush) :void
  (self :pointer))

(cffi:defcfun ("_wrap_format_account___funcall__" format_account___funcall__) :void
  (self :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_delete_format_account" delete_format_account) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_format_equity" new_format_equity) :pointer
  (_output_stream :pointer)
  (_format :pointer)
  (display_predicate :pointer))

(cffi:defcfun ("_wrap_format_equity_flush" format_equity_flush) :void
  (self :pointer))

(cffi:defcfun ("_wrap_format_equity___funcall__" format_equity___funcall__) :void
  (self :pointer)
  (account :pointer))

(cffi:defcfun ("_wrap_delete_format_equity" delete_format_equity) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_format_error__SWIG_0" new_format_error) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_format_error__SWIG_1" new_format_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_format_error" delete_format_error) :void
  (self :pointer))


