/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _WALK_H
#define _WALK_H

#include "journal.h"
#include "balance.h"
#include "valexpr.h"
#include "datetime.h"

#include <iostream>
#include <fstream>
#include <deque>


EXPORT int _wrap_transaction_has_xdata (transaction_t *larg1) {
  int lresult = (int)0 ;
  transaction_t *arg1 = 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ledger::transaction_has_xdata((transaction_t const &)*arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::transaction_xdata_t *_wrap_transaction_xdata_ (transaction_t *larg1) {
  ledger::transaction_xdata_t * lresult = (ledger::transaction_xdata_t *)0 ;
  transaction_t *arg1 = 0 ;
  ledger::transaction_xdata_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::transaction_xdata_t *) &ledger::transaction_xdata_((transaction_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_xdata_t *)0;
  }
}


EXPORT ledger::transaction_xdata_t *_wrap_transaction_xdata (transaction_t *larg1) {
  ledger::transaction_xdata_t * lresult = (ledger::transaction_xdata_t *)0 ;
  transaction_t *arg1 = 0 ;
  ledger::transaction_xdata_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::transaction_xdata_t *) &ledger::transaction_xdata((transaction_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_xdata_t *)0;
  }
}


EXPORT void _wrap_add_transaction_to (transaction_t *larg1, value_t *larg2) {
  transaction_t *arg1 = 0 ;
  value_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::add_transaction_to((transaction_t const &)*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT account_t *_wrap_xact_account__SWIG_0 (transaction_t *larg1) {
  account_t * lresult = (account_t *)0 ;
  transaction_t *arg1 = 0 ;
  account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (account_t *)ledger::xact_account(*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (account_t *)0;
  }
}


EXPORT account_t *_wrap_xact_account__SWIG_1 (transaction_t *larg1) {
  account_t * lresult = (account_t *)0 ;
  transaction_t *arg1 = 0 ;
  account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (account_t *)ledger::xact_account((transaction_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (account_t *)0;
  }
}


EXPORT void _wrap_walk_transactions__SWIG_0 (transactions_list::iterator *larg1, transactions_list::iterator *larg2, ledger::item_handler< transaction_t > *larg3) {
  transactions_list::iterator arg1 ;
  transactions_list::iterator arg2 ;
  ledger::item_handler< transaction_t > *arg3 = 0 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    ledger::walk_transactions(arg1,arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_transactions__SWIG_1 (transactions_list *larg1, ledger::item_handler< transaction_t > *larg2) {
  transactions_list *arg1 = 0 ;
  ledger::item_handler< transaction_t > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::walk_transactions(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_entries__SWIG_0 (entries_list::iterator *larg1, entries_list::iterator *larg2, ledger::item_handler< transaction_t > *larg3) {
  entries_list::iterator arg1 ;
  entries_list::iterator arg2 ;
  ledger::item_handler< transaction_t > *arg3 = 0 ;
  
  arg1 = *larg1;
  arg2 = *larg2;
  arg3 = larg3;
  try {
    ledger::walk_entries(arg1,arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_entries__SWIG_1 (entries_list *larg1, ledger::item_handler< transaction_t > *larg2) {
  entries_list *arg1 = 0 ;
  ledger::item_handler< transaction_t > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::walk_entries(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_ignore_transactions___funcall__ (ledger::ignore_transactions *larg1, transaction_t *larg2) {
  ledger::ignore_transactions *arg1 = (ledger::ignore_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::ignore_transactions *_wrap_new_ignore_transactions () {
  ledger::ignore_transactions * lresult = (ledger::ignore_transactions *)0 ;
  ledger::ignore_transactions *result = 0 ;
  
  try {
    result = (ledger::ignore_transactions *)new ledger::ignore_transactions();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::ignore_transactions *)0;
  }
}


EXPORT void _wrap_delete_ignore_transactions (ledger::ignore_transactions *larg1) {
  ledger::ignore_transactions *arg1 = (ledger::ignore_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_clear_transaction_xdata___funcall__ (ledger::clear_transaction_xdata *larg1, transaction_t *larg2) {
  ledger::clear_transaction_xdata *arg1 = (ledger::clear_transaction_xdata *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::clear_transaction_xdata *_wrap_new_clear_transaction_xdata () {
  ledger::clear_transaction_xdata * lresult = (ledger::clear_transaction_xdata *)0 ;
  ledger::clear_transaction_xdata *result = 0 ;
  
  try {
    result = (ledger::clear_transaction_xdata *)new ledger::clear_transaction_xdata();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::clear_transaction_xdata *)0;
  }
}


EXPORT void _wrap_delete_clear_transaction_xdata (ledger::clear_transaction_xdata *larg1) {
  ledger::clear_transaction_xdata *arg1 = (ledger::clear_transaction_xdata *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::truncate_entries *_wrap_new_truncate_entries (ledger::item_handler< transaction_t > *larg1, int larg2, int larg3) {
  ledger::truncate_entries * lresult = (ledger::truncate_entries *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  ledger::truncate_entries *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::truncate_entries *)new ledger::truncate_entries(arg1,arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::truncate_entries *)0;
  }
}


EXPORT void _wrap_truncate_entries_flush (ledger::truncate_entries *larg1) {
  ledger::truncate_entries *arg1 = (ledger::truncate_entries *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_truncate_entries___funcall__ (ledger::truncate_entries *larg1, transaction_t *larg2) {
  ledger::truncate_entries *arg1 = (ledger::truncate_entries *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_truncate_entries (ledger::truncate_entries *larg1) {
  ledger::truncate_entries *arg1 = (ledger::truncate_entries *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::set_account_value *_wrap_new_set_account_value__SWIG_0 (ledger::item_handler< transaction_t > *larg1) {
  ledger::set_account_value * lresult = (ledger::set_account_value *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::set_account_value *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::set_account_value *)new ledger::set_account_value(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::set_account_value *)0;
  }
}


EXPORT ledger::set_account_value *_wrap_new_set_account_value__SWIG_1 () {
  ledger::set_account_value * lresult = (ledger::set_account_value *)0 ;
  ledger::set_account_value *result = 0 ;
  
  try {
    result = (ledger::set_account_value *)new ledger::set_account_value();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::set_account_value *)0;
  }
}


EXPORT void _wrap_set_account_value___funcall__ (ledger::set_account_value *larg1, transaction_t *larg2) {
  ledger::set_account_value *arg1 = (ledger::set_account_value *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_set_account_value (ledger::set_account_value *larg1) {
  ledger::set_account_value *arg1 = (ledger::set_account_value *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_push_to_transactions_list_xact_list_set (ledger::push_to_transactions_list *larg1, transactions_list *larg2) {
  ledger::push_to_transactions_list *arg1 = (ledger::push_to_transactions_list *) 0 ;
  transactions_list *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->xact_list = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT transactions_list *_wrap_push_to_transactions_list_xact_list_get (ledger::push_to_transactions_list *larg1) {
  transactions_list * lresult = (transactions_list *)0 ;
  ledger::push_to_transactions_list *arg1 = (ledger::push_to_transactions_list *) 0 ;
  transactions_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (transactions_list *) &(transactions_list &) ((arg1)->xact_list);
    lresult = result;
    return lresult;
  } catch (...) {
    return (transactions_list *)0;
  }
}


EXPORT ledger::push_to_transactions_list *_wrap_new_push_to_transactions_list (transactions_list *larg1) {
  ledger::push_to_transactions_list * lresult = (ledger::push_to_transactions_list *)0 ;
  transactions_list *arg1 = 0 ;
  ledger::push_to_transactions_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::push_to_transactions_list *)new ledger::push_to_transactions_list(*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::push_to_transactions_list *)0;
  }
}


EXPORT void _wrap_push_to_transactions_list___funcall__ (ledger::push_to_transactions_list *larg1, transaction_t *larg2) {
  ledger::push_to_transactions_list *arg1 = (ledger::push_to_transactions_list *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_push_to_transactions_list (ledger::push_to_transactions_list *larg1) {
  ledger::push_to_transactions_list *arg1 = (ledger::push_to_transactions_list *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::sort_transactions *_wrap_new_sort_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, value_expr_t *larg2) {
  ledger::sort_transactions * lresult = (ledger::sort_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  value_expr_t *arg2 = (value_expr_t *) 0 ;
  ledger::sort_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::sort_transactions *)new ledger::sort_transactions(arg1,(value_expr_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::sort_transactions *)0;
  }
}


EXPORT ledger::sort_transactions *_wrap_new_sort_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1, std::string *larg2) {
  ledger::sort_transactions * lresult = (ledger::sort_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  ledger::sort_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::sort_transactions *)new ledger::sort_transactions(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::sort_transactions *)0;
  }
}


EXPORT void _wrap_delete_sort_transactions (ledger::sort_transactions *larg1) {
  ledger::sort_transactions *arg1 = (ledger::sort_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_sort_transactions_post_accumulated_xacts (ledger::sort_transactions *larg1) {
  ledger::sort_transactions *arg1 = (ledger::sort_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->post_accumulated_xacts();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_sort_transactions_flush (ledger::sort_transactions *larg1) {
  ledger::sort_transactions *arg1 = (ledger::sort_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_sort_transactions___funcall__ (ledger::sort_transactions *larg1, transaction_t *larg2) {
  ledger::sort_transactions *arg1 = (ledger::sort_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::sort_entries *_wrap_new_sort_entries__SWIG_0 (ledger::item_handler< transaction_t > *larg1, value_expr_t *larg2) {
  ledger::sort_entries * lresult = (ledger::sort_entries *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  value_expr_t *arg2 = (value_expr_t *) 0 ;
  ledger::sort_entries *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::sort_entries *)new ledger::sort_entries(arg1,(value_expr_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::sort_entries *)0;
  }
}


EXPORT ledger::sort_entries *_wrap_new_sort_entries__SWIG_1 (ledger::item_handler< transaction_t > *larg1, std::string *larg2) {
  ledger::sort_entries * lresult = (ledger::sort_entries *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  ledger::sort_entries *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::sort_entries *)new ledger::sort_entries(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::sort_entries *)0;
  }
}


EXPORT void _wrap_sort_entries_flush (ledger::sort_entries *larg1) {
  ledger::sort_entries *arg1 = (ledger::sort_entries *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_sort_entries___funcall__ (ledger::sort_entries *larg1, transaction_t *larg2) {
  ledger::sort_entries *arg1 = (ledger::sort_entries *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_sort_entries (ledger::sort_entries *larg1) {
  ledger::sort_entries *arg1 = (ledger::sort_entries *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::filter_transactions *_wrap_new_filter_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, value_expr_t *larg2) {
  ledger::filter_transactions * lresult = (ledger::filter_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  value_expr_t *arg2 = (value_expr_t *) 0 ;
  ledger::filter_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::filter_transactions *)new ledger::filter_transactions(arg1,(value_expr_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::filter_transactions *)0;
  }
}


EXPORT ledger::filter_transactions *_wrap_new_filter_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1, std::string *larg2) {
  ledger::filter_transactions * lresult = (ledger::filter_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  ledger::filter_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::filter_transactions *)new ledger::filter_transactions(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::filter_transactions *)0;
  }
}


EXPORT void _wrap_filter_transactions___funcall__ (ledger::filter_transactions *larg1, transaction_t *larg2) {
  ledger::filter_transactions *arg1 = (ledger::filter_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_filter_transactions (ledger::filter_transactions *larg1) {
  ledger::filter_transactions *arg1 = (ledger::filter_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::calc_transactions *_wrap_new_calc_transactions (ledger::item_handler< transaction_t > *larg1) {
  ledger::calc_transactions * lresult = (ledger::calc_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::calc_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::calc_transactions *)new ledger::calc_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::calc_transactions *)0;
  }
}


EXPORT void _wrap_calc_transactions___funcall__ (ledger::calc_transactions *larg1, transaction_t *larg2) {
  ledger::calc_transactions *arg1 = (ledger::calc_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_calc_transactions (ledger::calc_transactions *larg1) {
  ledger::calc_transactions *arg1 = (ledger::calc_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::invert_transactions *_wrap_new_invert_transactions (ledger::item_handler< transaction_t > *larg1) {
  ledger::invert_transactions * lresult = (ledger::invert_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::invert_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::invert_transactions *)new ledger::invert_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::invert_transactions *)0;
  }
}


EXPORT void _wrap_invert_transactions___funcall__ (ledger::invert_transactions *larg1, transaction_t *larg2) {
  ledger::invert_transactions *arg1 = (ledger::invert_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_invert_transactions (ledger::invert_transactions *larg1) {
  ledger::invert_transactions *arg1 = (ledger::invert_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_clear_entries_transactions (std::list< entry_t > *larg1) {
  std::list< entry_t > *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ledger::clear_entries_transactions(*arg1);
    
  } catch (...) {
    
  }
}


EXPORT ledger::collapse_transactions *_wrap_new_collapse_transactions (ledger::item_handler< transaction_t > *larg1) {
  ledger::collapse_transactions * lresult = (ledger::collapse_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::collapse_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::collapse_transactions *)new ledger::collapse_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::collapse_transactions *)0;
  }
}


EXPORT void _wrap_delete_collapse_transactions (ledger::collapse_transactions *larg1) {
  ledger::collapse_transactions *arg1 = (ledger::collapse_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_collapse_transactions_flush (ledger::collapse_transactions *larg1) {
  ledger::collapse_transactions *arg1 = (ledger::collapse_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_collapse_transactions_report_subtotal (ledger::collapse_transactions *larg1) {
  ledger::collapse_transactions *arg1 = (ledger::collapse_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->report_subtotal();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_collapse_transactions___funcall__ (ledger::collapse_transactions *larg1, transaction_t *larg2) {
  ledger::collapse_transactions *arg1 = (ledger::collapse_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::component_transactions *_wrap_new_component_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, value_expr_t *larg2) {
  ledger::component_transactions * lresult = (ledger::component_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  value_expr_t *arg2 = (value_expr_t *) 0 ;
  ledger::component_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::component_transactions *)new ledger::component_transactions(arg1,(value_expr_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::component_transactions *)0;
  }
}


EXPORT ledger::component_transactions *_wrap_new_component_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1, std::string *larg2) {
  ledger::component_transactions * lresult = (ledger::component_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  ledger::component_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::component_transactions *)new ledger::component_transactions(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::component_transactions *)0;
  }
}


EXPORT void _wrap_component_transactions___funcall__ (ledger::component_transactions *larg1, transaction_t *larg2) {
  ledger::component_transactions *arg1 = (ledger::component_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_component_transactions (ledger::component_transactions *larg1) {
  ledger::component_transactions *arg1 = (ledger::component_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::related_transactions *_wrap_new_related_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, int larg2) {
  ledger::related_transactions * lresult = (ledger::related_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  bool arg2 ;
  ledger::related_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::related_transactions *)new ledger::related_transactions(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::related_transactions *)0;
  }
}


EXPORT ledger::related_transactions *_wrap_new_related_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1) {
  ledger::related_transactions * lresult = (ledger::related_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::related_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::related_transactions *)new ledger::related_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::related_transactions *)0;
  }
}


EXPORT void _wrap_related_transactions_flush (ledger::related_transactions *larg1) {
  ledger::related_transactions *arg1 = (ledger::related_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_related_transactions___funcall__ (ledger::related_transactions *larg1, transaction_t *larg2) {
  ledger::related_transactions *arg1 = (ledger::related_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_related_transactions (ledger::related_transactions *larg1) {
  ledger::related_transactions *arg1 = (ledger::related_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::changed_value_transactions *_wrap_new_changed_value_transactions (ledger::item_handler< transaction_t > *larg1, int larg2) {
  ledger::changed_value_transactions * lresult = (ledger::changed_value_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  bool arg2 ;
  ledger::changed_value_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::changed_value_transactions *)new ledger::changed_value_transactions(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::changed_value_transactions *)0;
  }
}


EXPORT void _wrap_delete_changed_value_transactions (ledger::changed_value_transactions *larg1) {
  ledger::changed_value_transactions *arg1 = (ledger::changed_value_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_changed_value_transactions_flush (ledger::changed_value_transactions *larg1) {
  ledger::changed_value_transactions *arg1 = (ledger::changed_value_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_changed_value_transactions_output_diff (ledger::changed_value_transactions *larg1, datetime_t *larg2) {
  ledger::changed_value_transactions *arg1 = (ledger::changed_value_transactions *) 0 ;
  datetime_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->output_diff((datetime_t const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_changed_value_transactions___funcall__ (ledger::changed_value_transactions *larg1, transaction_t *larg2) {
  ledger::changed_value_transactions *arg1 = (ledger::changed_value_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_subtotal_transactions_start_set (ledger::subtotal_transactions *larg1, datetime_t *larg2) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->start = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_subtotal_transactions_start_get (ledger::subtotal_transactions *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->start);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_subtotal_transactions_finish_set (ledger::subtotal_transactions *larg1, datetime_t *larg2) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->finish = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_subtotal_transactions_finish_get (ledger::subtotal_transactions *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->finish);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT ledger::subtotal_transactions *_wrap_new_subtotal_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, int larg2) {
  ledger::subtotal_transactions * lresult = (ledger::subtotal_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  bool arg2 ;
  ledger::subtotal_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::subtotal_transactions *)new ledger::subtotal_transactions(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::subtotal_transactions *)0;
  }
}


EXPORT ledger::subtotal_transactions *_wrap_new_subtotal_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1) {
  ledger::subtotal_transactions * lresult = (ledger::subtotal_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::subtotal_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::subtotal_transactions *)new ledger::subtotal_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::subtotal_transactions *)0;
  }
}


EXPORT void _wrap_delete_subtotal_transactions (ledger::subtotal_transactions *larg1) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_subtotal_transactions_report_subtotal__SWIG_0 (ledger::subtotal_transactions *larg1, char *larg2) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->report_subtotal((char const *)arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_subtotal_transactions_report_subtotal__SWIG_1 (ledger::subtotal_transactions *larg1) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->report_subtotal();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_subtotal_transactions_flush (ledger::subtotal_transactions *larg1) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_subtotal_transactions___funcall__ (ledger::subtotal_transactions *larg1, transaction_t *larg2) {
  ledger::subtotal_transactions *arg1 = (ledger::subtotal_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::interval_expr_error *_wrap_new_interval_expr_error__SWIG_0 (std::string *larg1, error_context *larg2) {
  ledger::interval_expr_error * lresult = (ledger::interval_expr_error *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  ledger::interval_expr_error *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::interval_expr_error *)new ledger::interval_expr_error((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::interval_expr_error *)0;
  }
}


EXPORT ledger::interval_expr_error *_wrap_new_interval_expr_error__SWIG_1 (std::string *larg1) {
  ledger::interval_expr_error * lresult = (ledger::interval_expr_error *)0 ;
  std::string *arg1 = 0 ;
  ledger::interval_expr_error *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::interval_expr_error *)new ledger::interval_expr_error((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::interval_expr_error *)0;
  }
}


EXPORT void _wrap_delete_interval_expr_error (ledger::interval_expr_error *larg1) {
  ledger::interval_expr_error *arg1 = (ledger::interval_expr_error *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::interval_transactions *_wrap_new_interval_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, interval_t *larg2, int larg3) {
  ledger::interval_transactions * lresult = (ledger::interval_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  interval_t *arg2 = 0 ;
  bool arg3 ;
  ledger::interval_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (ledger::interval_transactions *)new ledger::interval_transactions(arg1,(interval_t const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::interval_transactions *)0;
  }
}


EXPORT ledger::interval_transactions *_wrap_new_interval_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1, interval_t *larg2) {
  ledger::interval_transactions * lresult = (ledger::interval_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  interval_t *arg2 = 0 ;
  ledger::interval_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::interval_transactions *)new ledger::interval_transactions(arg1,(interval_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::interval_transactions *)0;
  }
}


EXPORT ledger::interval_transactions *_wrap_new_interval_transactions__SWIG_2 (ledger::item_handler< transaction_t > *larg1, std::string *larg2, int larg3) {
  ledger::interval_transactions * lresult = (ledger::interval_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  ledger::interval_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (ledger::interval_transactions *)new ledger::interval_transactions(arg1,(std::string const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::interval_transactions *)0;
  }
}


EXPORT ledger::interval_transactions *_wrap_new_interval_transactions__SWIG_3 (ledger::item_handler< transaction_t > *larg1, std::string *larg2) {
  ledger::interval_transactions * lresult = (ledger::interval_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  ledger::interval_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::interval_transactions *)new ledger::interval_transactions(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::interval_transactions *)0;
  }
}


EXPORT void _wrap_interval_transactions_report_subtotal__SWIG_0 (ledger::interval_transactions *larg1, datetime_t *larg2) {
  ledger::interval_transactions *arg1 = (ledger::interval_transactions *) 0 ;
  datetime_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->report_subtotal((datetime_t const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_interval_transactions_report_subtotal__SWIG_1 (ledger::interval_transactions *larg1) {
  ledger::interval_transactions *arg1 = (ledger::interval_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->report_subtotal();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_interval_transactions_flush (ledger::interval_transactions *larg1) {
  ledger::interval_transactions *arg1 = (ledger::interval_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_interval_transactions___funcall__ (ledger::interval_transactions *larg1, transaction_t *larg2) {
  ledger::interval_transactions *arg1 = (ledger::interval_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_interval_transactions (ledger::interval_transactions *larg1) {
  ledger::interval_transactions *arg1 = (ledger::interval_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::by_payee_transactions *_wrap_new_by_payee_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, int larg2) {
  ledger::by_payee_transactions * lresult = (ledger::by_payee_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  bool arg2 ;
  ledger::by_payee_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::by_payee_transactions *)new ledger::by_payee_transactions(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::by_payee_transactions *)0;
  }
}


EXPORT ledger::by_payee_transactions *_wrap_new_by_payee_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1) {
  ledger::by_payee_transactions * lresult = (ledger::by_payee_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::by_payee_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::by_payee_transactions *)new ledger::by_payee_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::by_payee_transactions *)0;
  }
}


EXPORT void _wrap_delete_by_payee_transactions (ledger::by_payee_transactions *larg1) {
  ledger::by_payee_transactions *arg1 = (ledger::by_payee_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_by_payee_transactions_flush (ledger::by_payee_transactions *larg1) {
  ledger::by_payee_transactions *arg1 = (ledger::by_payee_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_by_payee_transactions___funcall__ (ledger::by_payee_transactions *larg1, transaction_t *larg2) {
  ledger::by_payee_transactions *arg1 = (ledger::by_payee_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::set_comm_as_payee *_wrap_new_set_comm_as_payee (ledger::item_handler< transaction_t > *larg1) {
  ledger::set_comm_as_payee * lresult = (ledger::set_comm_as_payee *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::set_comm_as_payee *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::set_comm_as_payee *)new ledger::set_comm_as_payee(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::set_comm_as_payee *)0;
  }
}


EXPORT void _wrap_delete_set_comm_as_payee (ledger::set_comm_as_payee *larg1) {
  ledger::set_comm_as_payee *arg1 = (ledger::set_comm_as_payee *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_set_comm_as_payee___funcall__ (ledger::set_comm_as_payee *larg1, transaction_t *larg2) {
  ledger::set_comm_as_payee *arg1 = (ledger::set_comm_as_payee *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::set_code_as_payee *_wrap_new_set_code_as_payee (ledger::item_handler< transaction_t > *larg1) {
  ledger::set_code_as_payee * lresult = (ledger::set_code_as_payee *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::set_code_as_payee *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::set_code_as_payee *)new ledger::set_code_as_payee(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::set_code_as_payee *)0;
  }
}


EXPORT void _wrap_delete_set_code_as_payee (ledger::set_code_as_payee *larg1) {
  ledger::set_code_as_payee *arg1 = (ledger::set_code_as_payee *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_set_code_as_payee___funcall__ (ledger::set_code_as_payee *larg1, transaction_t *larg2) {
  ledger::set_code_as_payee *arg1 = (ledger::set_code_as_payee *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::dow_transactions *_wrap_new_dow_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, int larg2) {
  ledger::dow_transactions * lresult = (ledger::dow_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  bool arg2 ;
  ledger::dow_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::dow_transactions *)new ledger::dow_transactions(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::dow_transactions *)0;
  }
}


EXPORT ledger::dow_transactions *_wrap_new_dow_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1) {
  ledger::dow_transactions * lresult = (ledger::dow_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::dow_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::dow_transactions *)new ledger::dow_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::dow_transactions *)0;
  }
}


EXPORT void _wrap_dow_transactions_flush (ledger::dow_transactions *larg1) {
  ledger::dow_transactions *arg1 = (ledger::dow_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_dow_transactions___funcall__ (ledger::dow_transactions *larg1, transaction_t *larg2) {
  ledger::dow_transactions *arg1 = (ledger::dow_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_dow_transactions (ledger::dow_transactions *larg1) {
  ledger::dow_transactions *arg1 = (ledger::dow_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::generate_transactions *_wrap_new_generate_transactions (ledger::item_handler< transaction_t > *larg1) {
  ledger::generate_transactions * lresult = (ledger::generate_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::generate_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::generate_transactions *)new ledger::generate_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::generate_transactions *)0;
  }
}


EXPORT void _wrap_delete_generate_transactions (ledger::generate_transactions *larg1) {
  ledger::generate_transactions *arg1 = (ledger::generate_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_generate_transactions_add_period_entries (ledger::generate_transactions *larg1, period_entries_list *larg2) {
  ledger::generate_transactions *arg1 = (ledger::generate_transactions *) 0 ;
  period_entries_list *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_period_entries(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_generate_transactions_add_transaction (ledger::generate_transactions *larg1, interval_t *larg2, transaction_t *larg3) {
  ledger::generate_transactions *arg1 = (ledger::generate_transactions *) 0 ;
  interval_t *arg2 = 0 ;
  transaction_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->add_transaction((interval_t const &)*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT ledger::budget_transactions *_wrap_new_budget_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, unsigned long larg2) {
  ledger::budget_transactions * lresult = (ledger::budget_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  unsigned long arg2 ;
  ledger::budget_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::budget_transactions *)new ledger::budget_transactions(arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::budget_transactions *)0;
  }
}


EXPORT ledger::budget_transactions *_wrap_new_budget_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1) {
  ledger::budget_transactions * lresult = (ledger::budget_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  ledger::budget_transactions *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::budget_transactions *)new ledger::budget_transactions(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::budget_transactions *)0;
  }
}


EXPORT void _wrap_budget_transactions_report_budget_items (ledger::budget_transactions *larg1, datetime_t *larg2) {
  ledger::budget_transactions *arg1 = (ledger::budget_transactions *) 0 ;
  datetime_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->report_budget_items((datetime_t const &)*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_budget_transactions___funcall__ (ledger::budget_transactions *larg1, transaction_t *larg2) {
  ledger::budget_transactions *arg1 = (ledger::budget_transactions *) 0 ;
  transaction_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_budget_transactions (ledger::budget_transactions *larg1) {
  ledger::budget_transactions *arg1 = (ledger::budget_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT ledger::forecast_transactions *_wrap_new_forecast_transactions__SWIG_0 (ledger::item_handler< transaction_t > *larg1, value_expr_t *larg2) {
  ledger::forecast_transactions * lresult = (ledger::forecast_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  value_expr_t *arg2 = (value_expr_t *) 0 ;
  ledger::forecast_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::forecast_transactions *)new ledger::forecast_transactions(arg1,(value_expr_t const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::forecast_transactions *)0;
  }
}


EXPORT ledger::forecast_transactions *_wrap_new_forecast_transactions__SWIG_1 (ledger::item_handler< transaction_t > *larg1, std::string *larg2) {
  ledger::forecast_transactions * lresult = (ledger::forecast_transactions *)0 ;
  ledger::item_handler< transaction_t > *arg1 = (ledger::item_handler< transaction_t > *) 0 ;
  std::string *arg2 = 0 ;
  ledger::forecast_transactions *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::forecast_transactions *)new ledger::forecast_transactions(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::forecast_transactions *)0;
  }
}


EXPORT void _wrap_forecast_transactions_add_transaction (ledger::forecast_transactions *larg1, interval_t *larg2, transaction_t *larg3) {
  ledger::forecast_transactions *arg1 = (ledger::forecast_transactions *) 0 ;
  interval_t *arg2 = 0 ;
  transaction_t *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    (arg1)->add_transaction((interval_t const &)*arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_forecast_transactions_flush (ledger::forecast_transactions *larg1) {
  ledger::forecast_transactions *arg1 = (ledger::forecast_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->flush();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_delete_forecast_transactions (ledger::forecast_transactions *larg1) {
  ledger::forecast_transactions *arg1 = (ledger::forecast_transactions *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_account_has_xdata (account_t *larg1) {
  int lresult = (int)0 ;
  account_t *arg1 = 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)ledger::account_has_xdata((account_t const &)*arg1);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::account_xdata_t *_wrap_account_xdata_ (account_t *larg1) {
  ledger::account_xdata_t * lresult = (ledger::account_xdata_t *)0 ;
  account_t *arg1 = 0 ;
  ledger::account_xdata_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_xdata_t *) &ledger::account_xdata_((account_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_xdata_t *)0;
  }
}


EXPORT ledger::account_xdata_t *_wrap_account_xdata (account_t *larg1) {
  ledger::account_xdata_t * lresult = (ledger::account_xdata_t *)0 ;
  account_t *arg1 = 0 ;
  ledger::account_xdata_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_xdata_t *) &ledger::account_xdata((account_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_xdata_t *)0;
  }
}


EXPORT void _wrap_clear_account_xdata___funcall__ (ledger::clear_account_xdata *larg1, account_t *larg2) {
  ledger::clear_account_xdata *arg1 = (ledger::clear_account_xdata *) 0 ;
  account_t *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->operator ()(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::clear_account_xdata *_wrap_new_clear_account_xdata () {
  ledger::clear_account_xdata * lresult = (ledger::clear_account_xdata *)0 ;
  ledger::clear_account_xdata *result = 0 ;
  
  try {
    result = (ledger::clear_account_xdata *)new ledger::clear_account_xdata();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::clear_account_xdata *)0;
  }
}


EXPORT void _wrap_delete_clear_account_xdata (ledger::clear_account_xdata *larg1) {
  ledger::clear_account_xdata *arg1 = (ledger::clear_account_xdata *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_sum_accounts (account_t *larg1) {
  account_t *arg1 = 0 ;
  
  arg1 = larg1;
  try {
    ledger::sum_accounts(*arg1);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_sort_accounts (account_t *larg1, value_expr_t *larg2, ledger::accounts_deque *larg3) {
  account_t *arg1 = 0 ;
  value_expr_t *arg2 = (value_expr_t *) 0 ;
  ledger::accounts_deque *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ledger::sort_accounts(*arg1,(value_expr_t const *)arg2,*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_accounts__SWIG_0 (account_t *larg1, ledger::item_handler< account_t > *larg2, value_expr_t *larg3) {
  account_t *arg1 = 0 ;
  ledger::item_handler< account_t > *arg2 = 0 ;
  value_expr_t *arg3 = (value_expr_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ledger::walk_accounts(*arg1,*arg2,(value_expr_t const *)arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_accounts__SWIG_1 (account_t *larg1, ledger::item_handler< account_t > *larg2) {
  account_t *arg1 = 0 ;
  ledger::item_handler< account_t > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::walk_accounts(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_accounts__SWIG_2 (account_t *larg1, ledger::item_handler< account_t > *larg2, std::string *larg3) {
  account_t *arg1 = 0 ;
  ledger::item_handler< account_t > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    ledger::walk_accounts(*arg1,*arg2,(std::string const &)*arg3);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_walk_commodities (commodities_map *larg1, ledger::item_handler< transaction_t > *larg2) {
  commodities_map *arg1 = 0 ;
  ledger::item_handler< transaction_t > *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ledger::walk_commodities(*arg1,*arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_clear_journal_xdata (journal_t *larg1) {
  journal_t *arg1 = (journal_t *) 0 ;
  
  arg1 = larg1;
  try {
    ledger::clear_journal_xdata(arg1);
    
  } catch (...) {
    
  }
}



#endif // _WALK_H
  
