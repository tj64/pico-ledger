/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _VALUE_H
#define _VALUE_H

#include "amount.h"
#include "balance.h"
#include "error.h"

#include <exception>


EXPORT void _wrap_value_t_data_set (ledger::value_t *larg1, char *larg2) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  char *arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      if(arg2) {
        strncpy((char*)arg1->data, (const char *)arg2, sizeof(balance_pair_t)-1);
        arg1->data[sizeof(balance_pair_t)-1] = 0;
      } else {
        arg1->data[0] = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_value_t_data_get (ledger::value_t *larg1) {
  char * lresult = (char *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *)(char *) ((arg1)->data);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_value_t_type_set (ledger::value_t *larg1, enum ledger::value_t::type_t larg2) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  enum ledger::value_t::type_t arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->type = arg2;
    
  } catch (...) {
    
  }
}


EXPORT enum ledger::value_t::type_t _wrap_value_t_type_get (ledger::value_t *larg1) {
  enum ledger::value_t::type_t lresult = (enum ledger::value_t::type_t)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  enum ledger::value_t::type_t result;
  
  arg1 = larg1;
  try {
    result = (enum ledger::value_t::type_t) ((arg1)->type);
    lresult = result;
    return lresult;
  } catch (...) {
    return (enum ledger::value_t::type_t)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_0 () {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *result = 0 ;
  
  try {
    result = (ledger::value_t *)new ledger::value_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_1 (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t((ledger::value_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_2 (int larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  bool arg1 ;
  ledger::value_t *result = 0 ;
  
  arg1 = (bool)larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_3 (long larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  long arg1 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_4 (datetime_t const *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  datetime_t arg1 ;
  ledger::value_t *result = 0 ;
  
  arg1 = *larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_5 (unsigned long larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  unsigned long arg1 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_6 (double larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  double arg1 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_7 (std::string *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_8 (char *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  char *arg1 = (char *) 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t((char const *)arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_9 (amount_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t((amount_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_10 (balance_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t((balance_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_new_value_t__SWIG_11 (balance_pair_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_t *)new ledger::value_t((balance_pair_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT void _wrap_delete_value_t (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_value_t_destroy (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->destroy();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_value_t_simplify (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->simplify();
    
  } catch (...) {
    
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_0 (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =((ledger::value_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_1 (ledger::value_t *larg1, int larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  bool arg2 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_2 (ledger::value_t *larg1, long larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  long arg2 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_3 (ledger::value_t *larg1, datetime_t const *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  datetime_t arg2 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_4 (ledger::value_t *larg1, unsigned long larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  unsigned long arg2 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_5 (ledger::value_t *larg1, double larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  double arg2 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =(arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_6 (ledger::value_t *larg1, std::string *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  std::string *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =((std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_7 (ledger::value_t *larg1, char *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  char *arg2 = (char *) 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =((char const *)arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_8 (ledger::value_t *larg1, amount_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_9 (ledger::value_t *larg1, balance_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  balance_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =((balance_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___assign____SWIG_10 (ledger::value_t *larg1, balance_pair_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  balance_pair_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator =((balance_pair_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___add_assign__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator +=((ledger::value_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___sub_assign__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator -=((ledger::value_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___mul_assign__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator *=((ledger::value_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___div_assign__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->operator /=((ledger::value_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___add__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->operator +((ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___sub__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->operator -((ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___mul__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->operator *((ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___div__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (arg1)->operator /((ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT int _wrap_value_t___lt__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator <((ledger::value_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_value_t___lte__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator <=((ledger::value_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_value_t___gt__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator >((ledger::value_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_value_t___gte__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator >=((ledger::value_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_value_t___eq__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator ==((ledger::value_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_value_t___ne__ (ledger::value_t *larg1, ledger::value_t *larg2) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator !=((ledger::value_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_value_t_negate (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->negate();
    
  } catch (...) {
    
  }
}


EXPORT ledger::value_t *_wrap_value_t_negated (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->negated();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t___neg__ (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->operator -();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT int _wrap_value_t_realzero (ledger::value_t *larg1) {
  int lresult = (int)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::value_t const *)arg1)->realzero();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_value_t_abs (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->abs();
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_value_t_cast (ledger::value_t *larg1, ledger::value_t::type_t larg2) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t::type_t arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->cast(arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::value_t *_wrap_value_t_cost (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->cost();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_price (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->price();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_date (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->date();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_strip_annotations__SWIG_0 (ledger::value_t *larg1, int larg2, int larg3, int larg4) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  arg4 = (bool)larg4;
  try {
    result = ((ledger::value_t const *)arg1)->strip_annotations(arg2,arg3,arg4);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_strip_annotations__SWIG_1 (ledger::value_t *larg1, int larg2, int larg3) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  arg3 = (bool)larg3;
  try {
    result = ((ledger::value_t const *)arg1)->strip_annotations(arg2,arg3);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_strip_annotations__SWIG_2 (ledger::value_t *larg1, int larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  bool arg2 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    result = ((ledger::value_t const *)arg1)->strip_annotations(arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_strip_annotations__SWIG_3 (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->strip_annotations();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_add__SWIG_0 (ledger::value_t *larg1, amount_t *larg2, amount_t *larg3) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  amount_t *arg2 = 0 ;
  amount_t *arg3 = (amount_t *) 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::value_t *) &(arg1)->add((amount_t const &)*arg2,(amount_t const *)arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_add__SWIG_1 (ledger::value_t *larg1, amount_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::value_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_t *) &(arg1)->add((amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_value_t_value (ledger::value_t *larg1, datetime_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  datetime_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ((ledger::value_t const *)arg1)->value((datetime_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT void _wrap_value_t_reduce (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->reduce();
    
  } catch (...) {
    
  }
}


EXPORT ledger::value_t *_wrap_value_t_reduced (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->reduced();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT void _wrap_value_t_round (ledger::value_t *larg1) {
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  
  arg1 = larg1;
  try {
    (arg1)->round();
    
  } catch (...) {
    
  }
}


EXPORT ledger::value_t *_wrap_value_t_unround (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = (ledger::value_t *) 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::value_t const *)arg1)->unround();
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___add____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator +((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___add____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator +((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___add____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator +((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___sub____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator -((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___sub____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator -((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___sub____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator -((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___mul____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator *((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___mul____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator *((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___mul____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator *((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___div____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator /((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___div____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator /((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___div____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator /((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___lt____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator <((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___lt____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator <((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___lt____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator <((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___lte____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator <=((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___lte____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator <=((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___lte____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator <=((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___gt____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator >((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___gt____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator >((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___gt____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator >((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___gte____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator >=((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___gte____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator >=((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___gte____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator >=((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___eq____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator ==((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___eq____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator ==((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___eq____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator ==((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___ne____SWIG_0 (balance_pair_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_pair_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator !=((balance_pair_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___ne____SWIG_1 (balance_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  balance_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator !=((balance_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap___ne____SWIG_2 (amount_t *larg1, ledger::value_t *larg2) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  amount_t *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = ledger::operator !=((amount_t const &)*arg1,(ledger::value_t const &)*arg2);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT ledger::value_t *_wrap_abs (ledger::value_t *larg1) {
  ledger::value_t * lresult = (ledger::value_t *)0 ;
  ledger::value_t *arg1 = 0 ;
  ledger::value_t result;
  
  arg1 = larg1;
  try {
    result = ledger::abs((ledger::value_t const &)*arg1);
    lresult = new ledger::value_t(result);
    return lresult;
  } catch (...) {
    return (ledger::value_t *)0;
  }
}


EXPORT std::ostream *_wrap___lshift__ (std::ostream *larg1, ledger::value_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::value_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::value_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}


EXPORT ledger::value_context *_wrap_new_value_context__SWIG_0 (ledger::value_t *larg1, std::string *larg2) {
  ledger::value_context * lresult = (ledger::value_context *)0 ;
  ledger::value_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ledger::value_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_context *)new ledger::value_context((ledger::value_t const &)*arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_context *)0;
  }
}


EXPORT ledger::value_context *_wrap_new_value_context__SWIG_1 (ledger::value_t *larg1) {
  ledger::value_context * lresult = (ledger::value_context *)0 ;
  ledger::value_t *arg1 = 0 ;
  ledger::value_context *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_context *)new ledger::value_context((ledger::value_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_context *)0;
  }
}


EXPORT void _wrap_delete_value_context (ledger::value_context *larg1) {
  ledger::value_context *arg1 = (ledger::value_context *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_value_context_describe (ledger::value_context *larg1, std::ostream *larg2) {
  ledger::value_context *arg1 = (ledger::value_context *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((ledger::value_context const *)arg1)->describe(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::value_error *_wrap_new_value_error__SWIG_0 (std::string *larg1, error_context *larg2) {
  ledger::value_error * lresult = (ledger::value_error *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  ledger::value_error *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::value_error *)new ledger::value_error((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_error *)0;
  }
}


EXPORT ledger::value_error *_wrap_new_value_error__SWIG_1 (std::string *larg1) {
  ledger::value_error * lresult = (ledger::value_error *)0 ;
  std::string *arg1 = 0 ;
  ledger::value_error *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::value_error *)new ledger::value_error((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::value_error *)0;
  }
}


EXPORT void _wrap_delete_value_error (ledger::value_error *larg1) {
  ledger::value_error *arg1 = (ledger::value_error *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#endif // _VALUE_H
  
