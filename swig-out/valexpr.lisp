;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct details_t
	(entry :pointer)
	(xact :pointer)
	(account :pointer))

(cffi:defcstruct value_expr_t
	(kind :pointer)
	(refc :short)
	(left :pointer)
	(release :pointer)
	(acquire :pointer)
	(acquire :pointer)
	(set_left :pointer)
	(set_right :pointer)
	(compute :pointer)
	(compute :pointer)
	(compute :pointer)
	(compute :pointer)
	(compute :pointer)
	(compute :pointer))

(cffi:defcfun ("_wrap_valexpr_context_expr_set" valexpr_context_expr_set) :void
  (self :pointer)
  (expr :pointer))

(cffi:defcfun ("_wrap_valexpr_context_expr_get" valexpr_context_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_valexpr_context_error_node_set" valexpr_context_error_node_set) :void
  (self :pointer)
  (error_node :pointer))

(cffi:defcfun ("_wrap_valexpr_context_error_node_get" valexpr_context_error_node_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_valexpr_context__SWIG_0" new_valexpr_context) :pointer
  (_expr :pointer)
  (desc :pointer))

(cffi:defcfun ("_wrap_new_valexpr_context__SWIG_1" new_valexpr_context) :pointer
  (_expr :pointer))

(cffi:defcfun ("_wrap_delete_valexpr_context" delete_valexpr_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_valexpr_context_describe" valexpr_context_describe) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_new_compute_error__SWIG_0" new_compute_error) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_compute_error__SWIG_1" new_compute_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_compute_error" delete_compute_error) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_value_expr_error__SWIG_0" new_value_expr_error) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_value_expr_error__SWIG_1" new_value_expr_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_value_expr_error" delete_value_expr_error) :void
  (self :pointer))

(cffi:defcstruct scope_t
	(parent :pointer)
	(symbol_map :pointer)
	(symbol_pair :pointer)
	(symbols :pointer)
	(define :pointer)
	(lookup :pointer))

(cffi:defcvar ("global_scope" global_scope)
 :pointer)

(cffi:defcvar ("terminus" terminus)
 :pointer)

(cffi:defcvar ("initialized" initialized)
 :pointer)

(cffi:defcfun ("_wrap_init_value_expr" init_value_expr) :void)

(cffi:defcfun ("_wrap_compute_amount__SWIG_0" compute_amount) :pointer
  (expr :pointer)
  (amt :pointer)
  (xact :pointer)
  (context :pointer))

(cffi:defcfun ("_wrap_compute_amount__SWIG_1" compute_amount) :pointer
  (expr :pointer)
  (amt :pointer)
  (xact :pointer))

(cl:defconstant PARSE_VALEXPR_NORMAL #x00)

(cl:defconstant PARSE_VALEXPR_PARTIAL #x01)

(cl:defconstant PARSE_VALEXPR_RELAXED #x02)

(cl:defconstant PARSE_VALEXPR_NO_MIGRATE #x04)

(cl:defconstant PARSE_VALEXPR_NO_REDUCE #x08)

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_0" parse_value_expr) :pointer
  (in :pointer)
  (scope :pointer)
  (flags :short))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_1" parse_value_expr) :pointer
  (in :pointer)
  (scope :pointer))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_2" parse_value_expr) :pointer
  (in :pointer))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_3" parse_value_expr) :pointer
  (str :pointer)
  (scope :pointer)
  (flags :short))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_4" parse_value_expr) :pointer
  (str :pointer)
  (scope :pointer))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_5" parse_value_expr) :pointer
  (str :pointer))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_6" parse_value_expr) :pointer
  (p :string)
  (scope :pointer)
  (flags :short))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_7" parse_value_expr) :pointer
  (p :string)
  (scope :pointer))

(cffi:defcfun ("_wrap_parse_value_expr__SWIG_8" parse_value_expr) :pointer
  (p :string))

(cffi:defcfun ("_wrap_dump_value_expr__SWIG_0" dump_value_expr) :void
  (out :pointer)
  (node :pointer)
  (depth :int))

(cffi:defcfun ("_wrap_dump_value_expr__SWIG_1" dump_value_expr) :void
  (out :pointer)
  (node :pointer))

(cffi:defcfun ("_wrap_write_value_expr__SWIG_0" write_value_expr) :pointer
  (out :pointer)
  (node :pointer)
  (relaxed :pointer)
  (node_to_find :pointer)
  (start_pos :pointer)
  (end_pos :pointer))

(cffi:defcfun ("_wrap_write_value_expr__SWIG_1" write_value_expr) :pointer
  (out :pointer)
  (node :pointer)
  (relaxed :pointer)
  (node_to_find :pointer)
  (start_pos :pointer))

(cffi:defcfun ("_wrap_write_value_expr__SWIG_2" write_value_expr) :pointer
  (out :pointer)
  (node :pointer)
  (relaxed :pointer)
  (node_to_find :pointer))

(cffi:defcfun ("_wrap_write_value_expr__SWIG_3" write_value_expr) :pointer
  (out :pointer)
  (node :pointer)
  (relaxed :pointer))

(cffi:defcfun ("_wrap_write_value_expr__SWIG_4" write_value_expr) :pointer
  (out :pointer)
  (node :pointer))

(cffi:defcfun ("_wrap_guarded_compute__SWIG_0" guarded_compute) :void
  (expr :pointer)
  (result :pointer)
  (details :pointer)
  (context :pointer))

(cffi:defcfun ("_wrap_guarded_compute__SWIG_1" guarded_compute) :void
  (expr :pointer)
  (result :pointer)
  (details :pointer))

(cffi:defcfun ("_wrap_guarded_compute__SWIG_2" guarded_compute) :void
  (expr :pointer)
  (result :pointer))

(cffi:defcfun ("_wrap_guarded_compute__SWIG_3" guarded_compute) :pointer
  (expr :pointer)
  (details :pointer)
  (context :pointer))

(cffi:defcfun ("_wrap_guarded_compute__SWIG_4" guarded_compute) :pointer
  (expr :pointer)
  (details :pointer))

(cffi:defcfun ("_wrap_guarded_compute__SWIG_5" guarded_compute) :pointer
  (expr :pointer))

(cffi:defcfun ("_wrap_value_expr_expr_set" value_expr_expr_set) :void
  (self :pointer)
  (expr :pointer))

(cffi:defcfun ("_wrap_value_expr_expr_get" value_expr_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_value_expr__SWIG_0" new_value_expr) :pointer)

(cffi:defcfun ("_wrap_new_value_expr__SWIG_1" new_value_expr) :pointer
  (_expr :pointer))

(cffi:defcfun ("_wrap_new_value_expr__SWIG_2" new_value_expr) :pointer
  (_ptr :pointer))

(cffi:defcfun ("_wrap_new_value_expr__SWIG_3" new_value_expr) :pointer
  (other :pointer))

(cffi:defcfun ("_wrap_delete_value_expr" delete_value_expr) :void
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr___assign____SWIG_0" value_expr___assign__) :pointer
  (self :pointer)
  (_expr :pointer))

(cffi:defcfun ("_wrap_value_expr___assign____SWIG_1" value_expr___assign__) :pointer
  (self :pointer)
  (_expr :pointer))

(cffi:defcfun ("_wrap_value_expr___assign____SWIG_2" value_expr___assign__) :pointer
  (self :pointer)
  (_expr :pointer))

(cffi:defcfun ("_wrap_value_expr___deref__" value_expr___deref__) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr___member_ref__" value_expr___member_ref__) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_get" value_expr_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_release" value_expr_release) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_reset__SWIG_0" value_expr_reset) :void
  (self :pointer)
  (p :pointer))

(cffi:defcfun ("_wrap_value_expr_reset__SWIG_1" value_expr_reset) :void
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_compute__SWIG_0" value_expr_compute) :void
  (self :pointer)
  (result :pointer)
  (details :pointer)
  (context :pointer))

(cffi:defcfun ("_wrap_value_expr_compute__SWIG_1" value_expr_compute) :void
  (self :pointer)
  (result :pointer)
  (details :pointer))

(cffi:defcfun ("_wrap_value_expr_compute__SWIG_2" value_expr_compute) :void
  (self :pointer)
  (result :pointer))

(cffi:defcfun ("_wrap_value_expr_compute__SWIG_3" value_expr_compute) :pointer
  (self :pointer)
  (details :pointer)
  (context :pointer))

(cffi:defcfun ("_wrap_value_expr_compute__SWIG_4" value_expr_compute) :pointer
  (self :pointer)
  (details :pointer))

(cffi:defcfun ("_wrap_value_expr_compute__SWIG_5" value_expr_compute) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_kind_set" value_expr_kind_set) :void
  (self :pointer)
  (kind :pointer))

(cffi:defcfun ("_wrap_value_expr_kind_get" value_expr_kind_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_refc_set" value_expr_refc_set) :void
  (self :pointer)
  (refc :short))

(cffi:defcfun ("_wrap_value_expr_refc_get" value_expr_refc_get) :short
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_left_set" value_expr_left_set) :void
  (self :pointer)
  (left :pointer))

(cffi:defcfun ("_wrap_value_expr_left_get" value_expr_left_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_acquire__SWIG_0" value_expr_acquire) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_acquire__SWIG_1" value_expr_acquire) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_value_expr_set_left" value_expr_set_left) :void
  (self :pointer)
  (expr :pointer))

(cffi:defcfun ("_wrap_value_expr_set_right" value_expr_set_right) :void
  (self :pointer)
  (expr :pointer))

(cffi:defcvar ("amount_expr" amount_expr)
 :pointer)

(cffi:defcvar ("total_expr" total_expr)
 :pointer)

(cffi:defcfun ("_wrap_compute_amount__SWIG_2" compute_amount) :void
  (result :pointer)
  (details :pointer))

(cffi:defcfun ("_wrap_compute_amount__SWIG_3" compute_amount) :void
  (result :pointer))

(cffi:defcfun ("_wrap_compute_amount__SWIG_4" compute_amount) :pointer
  (details :pointer))

(cffi:defcfun ("_wrap_compute_amount__SWIG_5" compute_amount) :pointer)

(cffi:defcfun ("_wrap_compute_total__SWIG_0" compute_total) :void
  (result :pointer)
  (details :pointer))

(cffi:defcfun ("_wrap_compute_total__SWIG_1" compute_total) :void
  (result :pointer))

(cffi:defcfun ("_wrap_compute_total__SWIG_2" compute_total) :pointer
  (details :pointer))

(cffi:defcfun ("_wrap_compute_total__SWIG_3" compute_total) :pointer)

(cffi:defcfun ("_wrap_parse_boolean_expr" parse_boolean_expr) :pointer
  (in :pointer)
  (scope :pointer)
  (flags :short))

(cffi:defcfun ("_wrap_parse_value_definition__SWIG_0" parse_value_definition) :void
  (str :pointer)
  (scope :pointer))

(cffi:defcfun ("_wrap_parse_value_definition__SWIG_1" parse_value_definition) :void
  (str :pointer))


