/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _JOURNAL_H
#define _JOURNAL_H

#include <map>
#include <list>
#include <string>
#include <iostream>

#include "amount.h"
#include "datetime.h"
#include "value.h"
#include "valexpr.h"
#include "error.h"
#include "debug.h"
#include "util.h"


EXPORT void _wrap_transaction_t_entry_set (ledger::transaction_t *larg1, ledger::entry_t *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::entry_t *arg2 = (ledger::entry_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->entry = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::entry_t *_wrap_transaction_t_entry_get (ledger::transaction_t *larg1) {
  ledger::entry_t * lresult = (ledger::entry_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::entry_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::entry_t *) ((arg1)->entry);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entry_t *)0;
  }
}


EXPORT void _wrap_transaction_t__date_set (ledger::transaction_t *larg1, datetime_t *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->_date = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_transaction_t__date_get (ledger::transaction_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->_date);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_transaction_t__date_eff_set (ledger::transaction_t *larg1, datetime_t *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->_date_eff = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_transaction_t__date_eff_get (ledger::transaction_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->_date_eff);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_transaction_t_account_set (ledger::transaction_t *larg1, ledger::account_t *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->account = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t *_wrap_transaction_t_account_get (ledger::transaction_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *) ((arg1)->account);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_transaction_t_amount_set (ledger::transaction_t *larg1, amount_t *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  amount_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->amount = arg2;
    
  } catch (...) {
    
  }
}


EXPORT amount_t *_wrap_transaction_t_amount_get (ledger::transaction_t *larg1) {
  amount_t * lresult = (amount_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  amount_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->amount);
    lresult = new amount_t(result);
    return lresult;
  } catch (...) {
    return (amount_t *)0;
  }
}


EXPORT void _wrap_transaction_t_amount_expr_set (ledger::transaction_t *larg1, value_expr *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  value_expr arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->amount_expr = arg2;
    
  } catch (...) {
    
  }
}


EXPORT value_expr *_wrap_transaction_t_amount_expr_get (ledger::transaction_t *larg1) {
  value_expr * lresult = (value_expr *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  value_expr result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->amount_expr);
    lresult = new value_expr(result);
    return lresult;
  } catch (...) {
    return (value_expr *)0;
  }
}


EXPORT void _wrap_transaction_t_cost_set (ledger::transaction_t *larg1, amount_t *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  amount_t *arg2 = (amount_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->cost = arg2;
    
  } catch (...) {
    
  }
}


EXPORT amount_t *_wrap_transaction_t_cost_get (ledger::transaction_t *larg1) {
  amount_t * lresult = (amount_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  amount_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (amount_t *) ((arg1)->cost);
    lresult = result;
    return lresult;
  } catch (...) {
    return (amount_t *)0;
  }
}


EXPORT void _wrap_transaction_t_cost_expr_set (ledger::transaction_t *larg1, std::string *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->cost_expr = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_transaction_t_cost_expr_get (ledger::transaction_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->cost_expr);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_transaction_t_state_set (ledger::transaction_t *larg1, ledger::transaction_t::state_t larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::transaction_t::state_t arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->state = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::transaction_t::state_t _wrap_transaction_t_state_get (ledger::transaction_t *larg1) {
  ledger::transaction_t::state_t lresult = (ledger::transaction_t::state_t)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::transaction_t::state_t result;
  
  arg1 = larg1;
  try {
    result = (ledger::transaction_t::state_t) ((arg1)->state);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t::state_t)0;
  }
}


EXPORT void _wrap_transaction_t_flags_set (ledger::transaction_t *larg1, unsigned short larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  unsigned short arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->flags = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned short _wrap_transaction_t_flags_get (ledger::transaction_t *larg1) {
  unsigned short lresult = (unsigned short)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  unsigned short result;
  
  arg1 = larg1;
  try {
    result = (unsigned short) ((arg1)->flags);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned short)0;
  }
}


EXPORT void _wrap_transaction_t_note_set (ledger::transaction_t *larg1, std::string *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->note = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_transaction_t_note_get (ledger::transaction_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->note);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_transaction_t_beg_pos_set (ledger::transaction_t *larg1, istream_pos_type *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  istream_pos_type arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->beg_pos = arg2;
    
  } catch (...) {
    
  }
}


EXPORT istream_pos_type *_wrap_transaction_t_beg_pos_get (ledger::transaction_t *larg1) {
  istream_pos_type * lresult = (istream_pos_type *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  istream_pos_type result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->beg_pos);
    lresult = new istream_pos_type(result);
    return lresult;
  } catch (...) {
    return (istream_pos_type *)0;
  }
}


EXPORT void _wrap_transaction_t_beg_line_set (ledger::transaction_t *larg1, unsigned long larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->beg_line = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_transaction_t_beg_line_get (ledger::transaction_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->beg_line);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_transaction_t_end_pos_set (ledger::transaction_t *larg1, istream_pos_type *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  istream_pos_type arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->end_pos = arg2;
    
  } catch (...) {
    
  }
}


EXPORT istream_pos_type *_wrap_transaction_t_end_pos_get (ledger::transaction_t *larg1) {
  istream_pos_type * lresult = (istream_pos_type *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  istream_pos_type result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->end_pos);
    lresult = new istream_pos_type(result);
    return lresult;
  } catch (...) {
    return (istream_pos_type *)0;
  }
}


EXPORT void _wrap_transaction_t_end_line_set (ledger::transaction_t *larg1, unsigned long larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->end_line = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_transaction_t_end_line_get (ledger::transaction_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->end_line);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_transaction_t_data_set (ledger::transaction_t *larg1, void *larg2) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->data = arg2;
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_transaction_t_data_get (ledger::transaction_t *larg1) {
  void * lresult = (void *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *) ((arg1)->data);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT ledger::transaction_t *_wrap_new_transaction_t__SWIG_0 (ledger::account_t *larg1) {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::transaction_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::transaction_t *)new ledger::transaction_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT ledger::transaction_t *_wrap_new_transaction_t__SWIG_1 () {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::transaction_t *result = 0 ;
  
  try {
    result = (ledger::transaction_t *)new ledger::transaction_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT ledger::transaction_t *_wrap_new_transaction_t__SWIG_2 (ledger::account_t *larg1, amount_t *larg2, unsigned int larg3, std::string *larg4) {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  amount_t *arg2 = 0 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  ledger::transaction_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  try {
    result = (ledger::transaction_t *)new ledger::transaction_t(arg1,(amount_t const &)*arg2,arg3,(std::string const &)*arg4);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT ledger::transaction_t *_wrap_new_transaction_t__SWIG_3 (ledger::account_t *larg1, amount_t *larg2, unsigned int larg3) {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  amount_t *arg2 = 0 ;
  unsigned int arg3 ;
  ledger::transaction_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::transaction_t *)new ledger::transaction_t(arg1,(amount_t const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT ledger::transaction_t *_wrap_new_transaction_t__SWIG_4 (ledger::account_t *larg1, amount_t *larg2) {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  amount_t *arg2 = 0 ;
  ledger::transaction_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::transaction_t *)new ledger::transaction_t(arg1,(amount_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT ledger::transaction_t *_wrap_new_transaction_t__SWIG_5 (ledger::transaction_t *larg1) {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::transaction_t *arg1 = 0 ;
  ledger::transaction_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::transaction_t *)new ledger::transaction_t((ledger::transaction_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT void _wrap_delete_transaction_t (ledger::transaction_t *larg1) {
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_transaction_t_actual_date (ledger::transaction_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::transaction_t const *)arg1)->actual_date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT datetime_t *_wrap_transaction_t_effective_date (ledger::transaction_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::transaction_t const *)arg1)->effective_date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT datetime_t *_wrap_transaction_t_date (ledger::transaction_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::transaction_t const *)arg1)->date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT int _wrap_transaction_t___eq__ (ledger::transaction_t *larg1, ledger::transaction_t *larg2) {
  int lresult = (int)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::transaction_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator ==((ledger::transaction_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_transaction_t___ne__ (ledger::transaction_t *larg1, ledger::transaction_t *larg2) {
  int lresult = (int)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  ledger::transaction_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator !=((ledger::transaction_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_transaction_t_valid (ledger::transaction_t *larg1) {
  int lresult = (int)0 ;
  ledger::transaction_t *arg1 = (ledger::transaction_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::transaction_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::transaction_t *_wrap_xact_context_xact_get (ledger::xact_context *larg1) {
  ledger::transaction_t * lresult = (ledger::transaction_t *)0 ;
  ledger::xact_context *arg1 = (ledger::xact_context *) 0 ;
  ledger::transaction_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::transaction_t *) &(ledger::transaction_t const &) ((arg1)->xact);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transaction_t *)0;
  }
}


EXPORT ledger::xact_context *_wrap_new_xact_context__SWIG_0 (ledger::transaction_t *larg1, std::string *larg2) {
  ledger::xact_context * lresult = (ledger::xact_context *)0 ;
  ledger::transaction_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ledger::xact_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::xact_context *)new ledger::xact_context((ledger::transaction_t const &)*arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::xact_context *)0;
  }
}


EXPORT ledger::xact_context *_wrap_new_xact_context__SWIG_1 (ledger::transaction_t *larg1) {
  ledger::xact_context * lresult = (ledger::xact_context *)0 ;
  ledger::transaction_t *arg1 = 0 ;
  ledger::xact_context *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::xact_context *)new ledger::xact_context((ledger::transaction_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::xact_context *)0;
  }
}


EXPORT void _wrap_delete_xact_context (ledger::xact_context *larg1) {
  ledger::xact_context *arg1 = (ledger::xact_context *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_entry_base_t_journal_set (ledger::entry_base_t *larg1, ledger::journal_t *larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::journal_t *arg2 = (ledger::journal_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->journal = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::journal_t *_wrap_entry_base_t_journal_get (ledger::entry_base_t *larg1) {
  ledger::journal_t * lresult = (ledger::journal_t *)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::journal_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::journal_t *) ((arg1)->journal);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::journal_t *)0;
  }
}


EXPORT void _wrap_entry_base_t_src_idx_set (ledger::entry_base_t *larg1, unsigned long larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->src_idx = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_entry_base_t_src_idx_get (ledger::entry_base_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->src_idx);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_entry_base_t_beg_pos_set (ledger::entry_base_t *larg1, istream_pos_type *larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  istream_pos_type arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->beg_pos = arg2;
    
  } catch (...) {
    
  }
}


EXPORT istream_pos_type *_wrap_entry_base_t_beg_pos_get (ledger::entry_base_t *larg1) {
  istream_pos_type * lresult = (istream_pos_type *)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  istream_pos_type result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->beg_pos);
    lresult = new istream_pos_type(result);
    return lresult;
  } catch (...) {
    return (istream_pos_type *)0;
  }
}


EXPORT void _wrap_entry_base_t_beg_line_set (ledger::entry_base_t *larg1, unsigned long larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->beg_line = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_entry_base_t_beg_line_get (ledger::entry_base_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->beg_line);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_entry_base_t_end_pos_set (ledger::entry_base_t *larg1, istream_pos_type *larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  istream_pos_type arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->end_pos = arg2;
    
  } catch (...) {
    
  }
}


EXPORT istream_pos_type *_wrap_entry_base_t_end_pos_get (ledger::entry_base_t *larg1) {
  istream_pos_type * lresult = (istream_pos_type *)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  istream_pos_type result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->end_pos);
    lresult = new istream_pos_type(result);
    return lresult;
  } catch (...) {
    return (istream_pos_type *)0;
  }
}


EXPORT void _wrap_entry_base_t_end_line_set (ledger::entry_base_t *larg1, unsigned long larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->end_line = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_entry_base_t_end_line_get (ledger::entry_base_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->end_line);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_entry_base_t_transactions_set (ledger::entry_base_t *larg1, ledger::transactions_list *larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::transactions_list *arg2 = (ledger::transactions_list *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->transactions = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::transactions_list *_wrap_entry_base_t_transactions_get (ledger::entry_base_t *larg1) {
  ledger::transactions_list * lresult = (ledger::transactions_list *)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::transactions_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::transactions_list *)& ((arg1)->transactions);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::transactions_list *)0;
  }
}


EXPORT void _wrap_delete_entry_base_t (ledger::entry_base_t *larg1) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_entry_base_t___eq__ (ledger::entry_base_t *larg1, ledger::entry_base_t *larg2) {
  int lresult = (int)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::entry_base_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator ==((ledger::entry_base_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_entry_base_t___ne__ (ledger::entry_base_t *larg1, ledger::entry_base_t *larg2) {
  int lresult = (int)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::entry_base_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator !=((ledger::entry_base_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_entry_base_t_add_transaction (ledger::entry_base_t *larg1, ledger::transaction_t *larg2) {
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::transaction_t *arg2 = (ledger::transaction_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_transaction(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_entry_base_t_remove_transaction (ledger::entry_base_t *larg1, ledger::transaction_t *larg2) {
  int lresult = (int)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  ledger::transaction_t *arg2 = (ledger::transaction_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_transaction(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_entry_base_t_finalize (ledger::entry_base_t *larg1) {
  int lresult = (int)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)(arg1)->finalize();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_entry_base_t_valid (ledger::entry_base_t *larg1) {
  int lresult = (int)0 ;
  ledger::entry_base_t *arg1 = (ledger::entry_base_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::entry_base_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_entry_t__date_set (ledger::entry_t *larg1, datetime_t *larg2) {
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->_date = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_entry_t__date_get (ledger::entry_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->_date);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_entry_t__date_eff_set (ledger::entry_t *larg1, datetime_t *larg2) {
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->_date_eff = arg2;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_entry_t__date_eff_get (ledger::entry_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->_date_eff);
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_entry_t_code_set (ledger::entry_t *larg1, std::string *larg2) {
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->code = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_entry_t_code_get (ledger::entry_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->code);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_entry_t_payee_set (ledger::entry_t *larg1, std::string *larg2) {
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->payee = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_entry_t_payee_get (ledger::entry_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->payee);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT ledger::entry_t *_wrap_new_entry_t__SWIG_0 () {
  ledger::entry_t * lresult = (ledger::entry_t *)0 ;
  ledger::entry_t *result = 0 ;
  
  try {
    result = (ledger::entry_t *)new ledger::entry_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entry_t *)0;
  }
}


EXPORT ledger::entry_t *_wrap_new_entry_t__SWIG_1 (ledger::entry_t *larg1) {
  ledger::entry_t * lresult = (ledger::entry_t *)0 ;
  ledger::entry_t *arg1 = 0 ;
  ledger::entry_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::entry_t *)new ledger::entry_t((ledger::entry_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entry_t *)0;
  }
}


EXPORT void _wrap_delete_entry_t (ledger::entry_t *larg1) {
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT datetime_t *_wrap_entry_t_actual_date (ledger::entry_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::entry_t const *)arg1)->actual_date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT datetime_t *_wrap_entry_t_effective_date (ledger::entry_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::entry_t const *)arg1)->effective_date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT datetime_t *_wrap_entry_t_date (ledger::entry_t *larg1) {
  datetime_t * lresult = (datetime_t *)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  datetime_t result;
  
  arg1 = larg1;
  try {
    result = ((ledger::entry_t const *)arg1)->date();
    lresult = new datetime_t(result);
    return lresult;
  } catch (...) {
    return (datetime_t *)0;
  }
}


EXPORT void _wrap_entry_t_add_transaction (ledger::entry_t *larg1, ledger::transaction_t *larg2) {
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  ledger::transaction_t *arg2 = (ledger::transaction_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_transaction(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_entry_t_valid (ledger::entry_t *larg1) {
  int lresult = (int)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::entry_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_entry_t_get_state (ledger::entry_t *larg1, ledger::transaction_t::state_t *larg2) {
  int lresult = (int)0 ;
  ledger::entry_t *arg1 = (ledger::entry_t *) 0 ;
  ledger::transaction_t::state_t *arg2 = (ledger::transaction_t::state_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)((ledger::entry_t const *)arg1)->get_state(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::entry_base_t *_wrap_entry_context_entry_get (ledger::entry_context *larg1) {
  ledger::entry_base_t * lresult = (ledger::entry_base_t *)0 ;
  ledger::entry_context *arg1 = (ledger::entry_context *) 0 ;
  ledger::entry_base_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::entry_base_t *) &(ledger::entry_base_t const &) ((arg1)->entry);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entry_base_t *)0;
  }
}


EXPORT ledger::entry_context *_wrap_new_entry_context__SWIG_0 (ledger::entry_base_t *larg1, std::string *larg2) {
  ledger::entry_context * lresult = (ledger::entry_context *)0 ;
  ledger::entry_base_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  ledger::entry_context *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::entry_context *)new ledger::entry_context((ledger::entry_base_t const &)*arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entry_context *)0;
  }
}


EXPORT ledger::entry_context *_wrap_new_entry_context__SWIG_1 (ledger::entry_base_t *larg1) {
  ledger::entry_context * lresult = (ledger::entry_context *)0 ;
  ledger::entry_base_t *arg1 = 0 ;
  ledger::entry_context *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::entry_context *)new ledger::entry_context((ledger::entry_base_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entry_context *)0;
  }
}


EXPORT void _wrap_delete_entry_context (ledger::entry_context *larg1) {
  ledger::entry_context *arg1 = (ledger::entry_context *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_entry_context_describe (ledger::entry_context *larg1, std::ostream *larg2) {
  ledger::entry_context *arg1 = (ledger::entry_context *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    ((ledger::entry_context const *)arg1)->describe(*arg2);
    
  } catch (...) {
    
  }
}


EXPORT ledger::balance_error *_wrap_new_balance_error__SWIG_0 (std::string *larg1, error_context *larg2) {
  ledger::balance_error * lresult = (ledger::balance_error *)0 ;
  std::string *arg1 = 0 ;
  error_context *arg2 = (error_context *) 0 ;
  ledger::balance_error *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::balance_error *)new ledger::balance_error((std::string const &)*arg1,arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_error *)0;
  }
}


EXPORT ledger::balance_error *_wrap_new_balance_error__SWIG_1 (std::string *larg1) {
  ledger::balance_error * lresult = (ledger::balance_error *)0 ;
  std::string *arg1 = 0 ;
  ledger::balance_error *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::balance_error *)new ledger::balance_error((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::balance_error *)0;
  }
}


EXPORT void _wrap_delete_balance_error (ledger::balance_error *larg1) {
  ledger::balance_error *arg1 = (ledger::balance_error *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_auto_entry_t_predicate_set (ledger::auto_entry_t *larg1, ledger::item_predicate< ledger::transaction_t > *larg2) {
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  ledger::item_predicate< ledger::transaction_t > *arg2 = (ledger::item_predicate< ledger::transaction_t > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->predicate = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::item_predicate< ledger::transaction_t > *_wrap_auto_entry_t_predicate_get (ledger::auto_entry_t *larg1) {
  ledger::item_predicate< ledger::transaction_t > * lresult = (ledger::item_predicate< ledger::transaction_t > *)0 ;
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  ledger::item_predicate< ledger::transaction_t > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::item_predicate< ledger::transaction_t > *) ((arg1)->predicate);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::item_predicate< ledger::transaction_t > *)0;
  }
}


EXPORT void _wrap_auto_entry_t_predicate_string_set (ledger::auto_entry_t *larg1, std::string *larg2) {
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->predicate_string = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_auto_entry_t_predicate_string_get (ledger::auto_entry_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->predicate_string);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT ledger::auto_entry_t *_wrap_new_auto_entry_t__SWIG_0 () {
  ledger::auto_entry_t * lresult = (ledger::auto_entry_t *)0 ;
  ledger::auto_entry_t *result = 0 ;
  
  try {
    result = (ledger::auto_entry_t *)new ledger::auto_entry_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::auto_entry_t *)0;
  }
}


EXPORT ledger::auto_entry_t *_wrap_new_auto_entry_t__SWIG_1 (std::string *larg1) {
  ledger::auto_entry_t * lresult = (ledger::auto_entry_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::auto_entry_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::auto_entry_t *)new ledger::auto_entry_t((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::auto_entry_t *)0;
  }
}


EXPORT void _wrap_delete_auto_entry_t (ledger::auto_entry_t *larg1) {
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_auto_entry_t_extend_entry (ledger::auto_entry_t *larg1, ledger::entry_base_t *larg2, int larg3) {
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  ledger::entry_base_t *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    (arg1)->extend_entry(*arg2,arg3);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_auto_entry_t_valid (ledger::auto_entry_t *larg1) {
  int lresult = (int)0 ;
  ledger::auto_entry_t *arg1 = (ledger::auto_entry_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::auto_entry_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_period_entry_t_period_set (ledger::period_entry_t *larg1, interval_t *larg2) {
  ledger::period_entry_t *arg1 = (ledger::period_entry_t *) 0 ;
  interval_t arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->period = arg2;
    
  } catch (...) {
    
  }
}


EXPORT interval_t *_wrap_period_entry_t_period_get (ledger::period_entry_t *larg1) {
  interval_t * lresult = (interval_t *)0 ;
  ledger::period_entry_t *arg1 = (ledger::period_entry_t *) 0 ;
  interval_t result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->period);
    lresult = new interval_t(result);
    return lresult;
  } catch (...) {
    return (interval_t *)0;
  }
}


EXPORT void _wrap_period_entry_t_period_string_set (ledger::period_entry_t *larg1, std::string *larg2) {
  ledger::period_entry_t *arg1 = (ledger::period_entry_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->period_string = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_period_entry_t_period_string_get (ledger::period_entry_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::period_entry_t *arg1 = (ledger::period_entry_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->period_string);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT ledger::period_entry_t *_wrap_new_period_entry_t__SWIG_0 () {
  ledger::period_entry_t * lresult = (ledger::period_entry_t *)0 ;
  ledger::period_entry_t *result = 0 ;
  
  try {
    result = (ledger::period_entry_t *)new ledger::period_entry_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::period_entry_t *)0;
  }
}


EXPORT ledger::period_entry_t *_wrap_new_period_entry_t__SWIG_1 (std::string *larg1) {
  ledger::period_entry_t * lresult = (ledger::period_entry_t *)0 ;
  std::string *arg1 = 0 ;
  ledger::period_entry_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::period_entry_t *)new ledger::period_entry_t((std::string const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::period_entry_t *)0;
  }
}


EXPORT ledger::period_entry_t *_wrap_new_period_entry_t__SWIG_2 (ledger::period_entry_t *larg1) {
  ledger::period_entry_t * lresult = (ledger::period_entry_t *)0 ;
  ledger::period_entry_t *arg1 = 0 ;
  ledger::period_entry_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::period_entry_t *)new ledger::period_entry_t((ledger::period_entry_t const &)*arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::period_entry_t *)0;
  }
}


EXPORT void _wrap_delete_period_entry_t (ledger::period_entry_t *larg1) {
  ledger::period_entry_t *arg1 = (ledger::period_entry_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_period_entry_t_valid (ledger::period_entry_t *larg1) {
  int lresult = (int)0 ;
  ledger::period_entry_t *arg1 = (ledger::period_entry_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::period_entry_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_account_t_journal_set (ledger::account_t *larg1, ledger::journal_t *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::journal_t *arg2 = (ledger::journal_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->journal = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::journal_t *_wrap_account_t_journal_get (ledger::account_t *larg1) {
  ledger::journal_t * lresult = (ledger::journal_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::journal_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::journal_t *) ((arg1)->journal);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::journal_t *)0;
  }
}


EXPORT void _wrap_account_t_parent_set (ledger::account_t *larg1, ledger::account_t *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->parent = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t *_wrap_account_t_parent_get (ledger::account_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *) ((arg1)->parent);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_account_t_name_set (ledger::account_t *larg1, std::string *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->name = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_account_t_name_get (ledger::account_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->name);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_account_t_note_set (ledger::account_t *larg1, std::string *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->note = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_account_t_note_get (ledger::account_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->note);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_account_t_depth_set (ledger::account_t *larg1, unsigned short larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  unsigned short arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->depth = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned short _wrap_account_t_depth_get (ledger::account_t *larg1) {
  unsigned short lresult = (unsigned short)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  unsigned short result;
  
  arg1 = larg1;
  try {
    result = (unsigned short) ((arg1)->depth);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned short)0;
  }
}


EXPORT void _wrap_account_t_accounts_set (ledger::account_t *larg1, ledger::accounts_map *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::accounts_map *arg2 = (ledger::accounts_map *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->accounts = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::accounts_map *_wrap_account_t_accounts_get (ledger::account_t *larg1) {
  ledger::accounts_map * lresult = (ledger::accounts_map *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::accounts_map *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::accounts_map *)& ((arg1)->accounts);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::accounts_map *)0;
  }
}


EXPORT void _wrap_account_t_data_set (ledger::account_t *larg1, void *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->data = arg2;
    
  } catch (...) {
    
  }
}


EXPORT void *_wrap_account_t_data_get (ledger::account_t *larg1) {
  void * lresult = (void *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  void *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (void *) ((arg1)->data);
    lresult = result;
    return lresult;
  } catch (...) {
    return (void *)0;
  }
}


EXPORT void _wrap_account_t_ident_set (ledger::account_t *larg1, ledger::account_t::ident_t larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::ident_t arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->ident = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t::ident_t _wrap_account_t_ident_get (ledger::account_t *larg1) {
  ledger::account_t::ident_t lresult = (ledger::account_t::ident_t)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t::ident_t result;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t::ident_t) ((arg1)->ident);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t::ident_t)0;
  }
}


EXPORT void _wrap_account_t__fullname_set (ledger::account_t *larg1, std::string *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->_fullname = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_account_t__fullname_get (ledger::account_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->_fullname);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_0 (ledger::account_t *larg1, std::string *larg2, std::string *larg3) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  try {
    result = (ledger::account_t *)new ledger::account_t(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_1 (ledger::account_t *larg1, std::string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)new ledger::account_t(arg1,(std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_2 (ledger::account_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *)new ledger::account_t(arg1);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_new_account_t__SWIG_3 () {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *result = 0 ;
  
  try {
    result = (ledger::account_t *)new ledger::account_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_delete_account_t (ledger::account_t *larg1) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_account_t___eq__ (ledger::account_t *larg1, ledger::account_t *larg2) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator ==((ledger::account_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_account_t___ne__ (ledger::account_t *larg1, ledger::account_t *larg2) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator !=((ledger::account_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT std::string *_wrap_account_t_fullname (ledger::account_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result = ((ledger::account_t const *)arg1)->fullname();
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_account_t_add_account (ledger::account_t *larg1, ledger::account_t *larg2) {
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_account(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_account_t_remove_account (ledger::account_t *larg1, ledger::account_t *larg2) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_account(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::account_t *_wrap_account_t_find_account__SWIG_0 (ledger::account_t *larg1, std::string *larg2, int larg3) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (ledger::account_t *)(arg1)->find_account((std::string const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_account_t_find_account__SWIG_1 (ledger::account_t *larg1, std::string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  std::string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)(arg1)->find_account((std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT int _wrap_account_t_valid (ledger::account_t *larg1) {
  int lresult = (int)0 ;
  ledger::account_t *arg1 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::account_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT std::ostream *_wrap___lshift__ (std::ostream *larg1, ledger::account_t *larg2) {
  std::ostream * lresult = (std::ostream *)0 ;
  std::ostream *arg1 = 0 ;
  ledger::account_t *arg2 = 0 ;
  std::ostream *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (std::ostream *) &ledger::operator <<(*arg1,(ledger::account_t const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::ostream *)0;
  }
}


EXPORT void _wrap_journal_t_master_set (ledger::journal_t *larg1, ledger::account_t *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->master = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t *_wrap_journal_t_master_get (ledger::journal_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *) ((arg1)->master);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_journal_t_basket_set (ledger::journal_t *larg1, ledger::account_t *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->basket = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::account_t *_wrap_journal_t_basket_get (ledger::journal_t *larg1) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::account_t *) ((arg1)->basket);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT void _wrap_journal_t_entries_set (ledger::journal_t *larg1, ledger::entries_list *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entries_list *arg2 = (ledger::entries_list *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->entries = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::entries_list *_wrap_journal_t_entries_get (ledger::journal_t *larg1) {
  ledger::entries_list * lresult = (ledger::entries_list *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entries_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::entries_list *)& ((arg1)->entries);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::entries_list *)0;
  }
}


EXPORT void _wrap_journal_t_sources_set (ledger::journal_t *larg1, ledger::strings_list *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::strings_list arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->sources = arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::strings_list *_wrap_journal_t_sources_get (ledger::journal_t *larg1) {
  ledger::strings_list * lresult = (ledger::strings_list *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::strings_list result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->sources);
    lresult = new ledger::strings_list(result);
    return lresult;
  } catch (...) {
    return (ledger::strings_list *)0;
  }
}


EXPORT void _wrap_journal_t_price_db_set (ledger::journal_t *larg1, std::string *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->price_db = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_journal_t_price_db_get (ledger::journal_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->price_db);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_journal_t_item_pool_set (ledger::journal_t *larg1, char *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      delete [] arg1->item_pool;
      if (arg2) {
        arg1->item_pool = (char *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->item_pool, (const char *)arg2);
      } else {
        arg1->item_pool = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_journal_t_item_pool_get (ledger::journal_t *larg1) {
  char * lresult = (char *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->item_pool);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_journal_t_item_pool_end_set (ledger::journal_t *larg1, char *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    {
      delete [] arg1->item_pool_end;
      if (arg2) {
        arg1->item_pool_end = (char *) (new char[strlen((const char *)arg2)+1]);
        strcpy((char *)arg1->item_pool_end, (const char *)arg2);
      } else {
        arg1->item_pool_end = 0;
      }
    }
    
  } catch (...) {
    
  }
}


EXPORT char *_wrap_journal_t_item_pool_end_get (ledger::journal_t *larg1) {
  char * lresult = (char *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  char *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (char *) ((arg1)->item_pool_end);
    lresult = result;
    return lresult;
  } catch (...) {
    return (char *)0;
  }
}


EXPORT void _wrap_journal_t_auto_entries_set (ledger::journal_t *larg1, ledger::auto_entries_list *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::auto_entries_list *arg2 = (ledger::auto_entries_list *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->auto_entries = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::auto_entries_list *_wrap_journal_t_auto_entries_get (ledger::journal_t *larg1) {
  ledger::auto_entries_list * lresult = (ledger::auto_entries_list *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::auto_entries_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::auto_entries_list *)& ((arg1)->auto_entries);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::auto_entries_list *)0;
  }
}


EXPORT void _wrap_journal_t_period_entries_set (ledger::journal_t *larg1, ledger::period_entries_list *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::period_entries_list *arg2 = (ledger::period_entries_list *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->period_entries = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::period_entries_list *_wrap_journal_t_period_entries_get (ledger::journal_t *larg1) {
  ledger::period_entries_list * lresult = (ledger::period_entries_list *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::period_entries_list *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::period_entries_list *)& ((arg1)->period_entries);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::period_entries_list *)0;
  }
}


EXPORT void _wrap_journal_t_accounts_cache_set (ledger::journal_t *larg1, ledger::accounts_map *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::accounts_map *arg2 = (ledger::accounts_map *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->accounts_cache = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT ledger::accounts_map *_wrap_journal_t_accounts_cache_get (ledger::journal_t *larg1) {
  ledger::accounts_map * lresult = (ledger::accounts_map *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::accounts_map *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (ledger::accounts_map *)& ((arg1)->accounts_cache);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::accounts_map *)0;
  }
}


EXPORT void _wrap_journal_t_entry_finalize_hooks_set (ledger::journal_t *larg1, std::list< ledger::entry_finalizer_t * > *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::list< ledger::entry_finalizer_t * > *arg2 = (std::list< ledger::entry_finalizer_t * > *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->entry_finalize_hooks = *arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::list< ledger::entry_finalizer_t * > *_wrap_journal_t_entry_finalize_hooks_get (ledger::journal_t *larg1) {
  std::list< ledger::entry_finalizer_t * > * lresult = (std::list< ledger::entry_finalizer_t * > *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::list< ledger::entry_finalizer_t * > *result = 0 ;
  
  arg1 = larg1;
  try {
    result = (std::list< ledger::entry_finalizer_t * > *)& ((arg1)->entry_finalize_hooks);
    lresult = result;
    return lresult;
  } catch (...) {
    return (std::list< ledger::entry_finalizer_t * > *)0;
  }
}


EXPORT ledger::journal_t *_wrap_new_journal_t () {
  ledger::journal_t * lresult = (ledger::journal_t *)0 ;
  ledger::journal_t *result = 0 ;
  
  try {
    result = (ledger::journal_t *)new ledger::journal_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::journal_t *)0;
  }
}


EXPORT void _wrap_delete_journal_t (ledger::journal_t *larg1) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_journal_t___eq__ (ledger::journal_t *larg1, ledger::journal_t *larg2) {
  int lresult = (int)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::journal_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator ==((ledger::journal_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_journal_t___ne__ (ledger::journal_t *larg1, ledger::journal_t *larg2) {
  int lresult = (int)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::journal_t *arg2 = 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->operator !=((ledger::journal_t const &)*arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_journal_t_add_account (ledger::journal_t *larg1, ledger::account_t *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_account(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_journal_t_remove_account (ledger::journal_t *larg1, ledger::account_t *larg2) {
  int lresult = (int)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::account_t *arg2 = (ledger::account_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_account(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::account_t *_wrap_journal_t_find_account__SWIG_0 (ledger::journal_t *larg1, std::string *larg2, int larg3) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    result = (ledger::account_t *)(arg1)->find_account((std::string const &)*arg2,arg3);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_journal_t_find_account__SWIG_1 (ledger::journal_t *larg1, std::string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)(arg1)->find_account((std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT ledger::account_t *_wrap_journal_t_find_account_re (ledger::journal_t *larg1, std::string *larg2) {
  ledger::account_t * lresult = (ledger::account_t *)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  std::string *arg2 = 0 ;
  ledger::account_t *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (ledger::account_t *)(arg1)->find_account_re((std::string const &)*arg2);
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::account_t *)0;
  }
}


EXPORT int _wrap_journal_t_add_entry (ledger::journal_t *larg1, ledger::entry_t *larg2) {
  int lresult = (int)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entry_t *arg2 = (ledger::entry_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->add_entry(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT int _wrap_journal_t_remove_entry (ledger::journal_t *larg1, ledger::entry_t *larg2) {
  int lresult = (int)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entry_t *arg2 = (ledger::entry_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    result = (bool)(arg1)->remove_entry(arg2);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_journal_t_add_entry_finalizer (ledger::journal_t *larg1, ledger::entry_finalizer_t *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entry_finalizer_t *arg2 = (ledger::entry_finalizer_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->add_entry_finalizer(arg2);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_journal_t_remove_entry_finalizer (ledger::journal_t *larg1, ledger::entry_finalizer_t *larg2) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entry_finalizer_t *arg2 = (ledger::entry_finalizer_t *) 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    (arg1)->remove_entry_finalizer(arg2);
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_journal_t_valid (ledger::journal_t *larg1) {
  int lresult = (int)0 ;
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool)((ledger::journal_t const *)arg1)->valid();
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_extend_entry_base (ledger::journal_t *larg1, ledger::entry_base_t *larg2, int larg3) {
  ledger::journal_t *arg1 = (ledger::journal_t *) 0 ;
  ledger::entry_base_t *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = (bool)larg3;
  try {
    ledger::extend_entry_base(arg1,*arg2,arg3);
    
  } catch (...) {
    
  }
}



#endif // _JOURNAL_H
  
