;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.9
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("_wrap_error_context_desc_set" error_context_desc_set) :void
  (self :pointer)
  (desc :pointer))

(cffi:defcfun ("_wrap_error_context_desc_get" error_context_desc_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_error_context" new_error_context) :pointer
  (_desc :pointer))

(cffi:defcfun ("_wrap_delete_error_context" delete_error_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_error_context_describe" error_context_describe) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_new_file_context__SWIG_0" new_file_context) :pointer
  (_file :pointer)
  (_line :unsigned-long)
  (desc :pointer))

(cffi:defcfun ("_wrap_new_file_context__SWIG_1" new_file_context) :pointer
  (_file :pointer)
  (_line :unsigned-long))

(cffi:defcfun ("_wrap_delete_file_context" delete_file_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_file_context_describe" file_context_describe) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_line_context_line_set" line_context_line_set) :void
  (self :pointer)
  (line :pointer))

(cffi:defcfun ("_wrap_line_context_line_get" line_context_line_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_line_context_pos_set" line_context_pos_set) :void
  (self :pointer)
  (pos :long))

(cffi:defcfun ("_wrap_line_context_pos_get" line_context_pos_get) :long
  (self :pointer))

(cffi:defcfun ("_wrap_new_line_context__SWIG_0" new_line_context) :pointer
  (_line :pointer)
  (_pos :long)
  (desc :pointer))

(cffi:defcfun ("_wrap_new_line_context__SWIG_1" new_line_context) :pointer
  (_line :pointer)
  (_pos :long))

(cffi:defcfun ("_wrap_delete_line_context" delete_line_context) :void
  (self :pointer))

(cffi:defcfun ("_wrap_line_context_describe" line_context_describe) :void
  (self :pointer)
  (out :pointer))

(cffi:defcfun ("_wrap_str_exception_context_set" str_exception_context_set) :void
  (self :pointer)
  (context :pointer))

(cffi:defcfun ("_wrap_str_exception_context_get" str_exception_context_get) :pointer
  (self :pointer))

(cffi:defcfun ("_wrap_new_str_exception__SWIG_0" new_str_exception) :pointer
  (_reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_str_exception__SWIG_1" new_str_exception) :pointer
  (_reason :pointer))

(cffi:defcfun ("_wrap_delete_str_exception" delete_str_exception) :void
  (self :pointer))

(cffi:defcfun ("_wrap_str_exception_reveal_context" str_exception_reveal_context) :void
  (self :pointer)
  (out :pointer)
  (kind :pointer))

(cffi:defcfun ("_wrap_str_exception_what" str_exception_what) :string
  (self :pointer))

(cffi:defcfun ("_wrap_new_error__SWIG_0" new_error) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_error__SWIG_1" new_error) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_error" delete_error) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_fatal__SWIG_0" new_fatal) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_fatal__SWIG_1" new_fatal) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_fatal" delete_fatal) :void
  (self :pointer))

(cffi:defcfun ("_wrap_new_fatal_assert__SWIG_0" new_fatal_assert) :pointer
  (reason :pointer)
  (ctxt :pointer))

(cffi:defcfun ("_wrap_new_fatal_assert__SWIG_1" new_fatal_assert) :pointer
  (reason :pointer))

(cffi:defcfun ("_wrap_delete_fatal_assert" delete_fatal_assert) :void
  (self :pointer))


