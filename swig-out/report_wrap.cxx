/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCFFI


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>



#ifdef __cplusplus
#  define EXTERN   extern "C"
#else
#  define EXTERN   extern
#endif

#define EXPORT   EXTERN SWIGEXPORT

#include <string.h>
#include <stdlib.h>



#ifndef _REPORT_H
#define _REPORT_H

#include "ledger.h"
#include "timing.h"

#include <iostream>
#include <memory>
#include <list>


EXPORT void _wrap_report_t_output_file_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->output_file = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_output_file_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->output_file);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_predicate_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->predicate = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_predicate_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->predicate);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_secondary_predicate_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->secondary_predicate = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_secondary_predicate_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->secondary_predicate);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_display_predicate_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->display_predicate = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_display_predicate_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->display_predicate);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_report_period_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->report_period = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_report_period_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->report_period);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_report_period_sort_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->report_period_sort = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_report_period_sort_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->report_period_sort);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_format_string_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->format_string = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_format_string_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->format_string);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_sort_string_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->sort_string = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_sort_string_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->sort_string);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_amount_expr_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->amount_expr = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_amount_expr_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->amount_expr);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_total_expr_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->total_expr = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_total_expr_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->total_expr);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_descend_expr_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->descend_expr = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_descend_expr_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->descend_expr);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_forecast_limit_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->forecast_limit = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_forecast_limit_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->forecast_limit);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_reconcile_balance_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->reconcile_balance = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_reconcile_balance_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->reconcile_balance);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_reconcile_date_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->reconcile_date = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_reconcile_date_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->reconcile_date);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_date_output_format_set (ledger::report_t *larg1, std::string *larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string arg2 ;
  
  arg1 = larg1;
  arg2 = *larg2;
  try {
    if (arg1) (arg1)->date_output_format = arg2;
    
  } catch (...) {
    
  }
}


EXPORT std::string *_wrap_report_t_date_output_format_get (ledger::report_t *larg1) {
  std::string * lresult = (std::string *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string result;
  
  arg1 = larg1;
  try {
    result =  ((arg1)->date_output_format);
    lresult = new std::string(result);
    return lresult;
  } catch (...) {
    return (std::string *)0;
  }
}


EXPORT void _wrap_report_t_budget_flags_set (ledger::report_t *larg1, unsigned long larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  unsigned long arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->budget_flags = arg2;
    
  } catch (...) {
    
  }
}


EXPORT unsigned long _wrap_report_t_budget_flags_get (ledger::report_t *larg1) {
  unsigned long lresult = (unsigned long)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  unsigned long result;
  
  arg1 = larg1;
  try {
    result = (unsigned long) ((arg1)->budget_flags);
    lresult = result;
    return lresult;
  } catch (...) {
    return (unsigned long)0;
  }
}


EXPORT void _wrap_report_t_head_entries_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->head_entries = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_head_entries_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->head_entries);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_tail_entries_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  int arg2 ;
  
  arg1 = larg1;
  arg2 = larg2;
  try {
    if (arg1) (arg1)->tail_entries = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_tail_entries_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  int result;
  
  arg1 = larg1;
  try {
    result = (int) ((arg1)->tail_entries);
    lresult = result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_collapsed_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_collapsed = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_collapsed_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_collapsed);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_subtotal_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_subtotal = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_subtotal_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_subtotal);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_totals_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_totals = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_totals_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_totals);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_related_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_related = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_related_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_related);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_all_related_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_all_related = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_all_related_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_all_related);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_inverted_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_inverted = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_inverted_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_inverted);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_empty_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_empty = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_empty_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_empty);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_days_of_the_week_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->days_of_the_week = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_days_of_the_week_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->days_of_the_week);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_by_payee_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->by_payee = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_by_payee_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->by_payee);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_comm_as_payee_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->comm_as_payee = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_comm_as_payee_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->comm_as_payee);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_code_as_payee_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->code_as_payee = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_code_as_payee_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->code_as_payee);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_revalued_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_revalued = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_revalued_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_revalued);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_show_revalued_only_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->show_revalued_only = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_show_revalued_only_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->show_revalued_only);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_keep_price_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->keep_price = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_keep_price_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->keep_price);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_keep_date_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->keep_date = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_keep_date_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->keep_date);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_keep_tag_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->keep_tag = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_keep_tag_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->keep_tag);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_entry_sort_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->entry_sort = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_entry_sort_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->entry_sort);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT void _wrap_report_t_sort_all_set (ledger::report_t *larg1, int larg2) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool arg2 ;
  
  arg1 = larg1;
  arg2 = (bool)larg2;
  try {
    if (arg1) (arg1)->sort_all = arg2;
    
  } catch (...) {
    
  }
}


EXPORT int _wrap_report_t_sort_all_get (ledger::report_t *larg1) {
  int lresult = (int)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  bool result;
  
  arg1 = larg1;
  try {
    result = (bool) ((arg1)->sort_all);
    lresult = (int)result;
    return lresult;
  } catch (...) {
    return (int)0;
  }
}


EXPORT ledger::report_t *_wrap_new_report_t () {
  ledger::report_t * lresult = (ledger::report_t *)0 ;
  ledger::report_t *result = 0 ;
  
  try {
    result = (ledger::report_t *)new ledger::report_t();
    lresult = result;
    return lresult;
  } catch (...) {
    return (ledger::report_t *)0;
  }
}


EXPORT void _wrap_report_t_regexps_to_predicate__SWIG_0 (ledger::report_t *larg1, std::string *larg2, std::list< std::string >::const_iterator *larg3, std::list< std::string >::const_iterator *larg4, int larg5, int larg6, int larg7) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string >::const_iterator arg3 ;
  std::list< std::string >::const_iterator arg4 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  arg7 = (bool)larg7;
  try {
    (arg1)->regexps_to_predicate((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_report_t_regexps_to_predicate__SWIG_1 (ledger::report_t *larg1, std::string *larg2, std::list< std::string >::const_iterator *larg3, std::list< std::string >::const_iterator *larg4, int larg5, int larg6) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string >::const_iterator arg3 ;
  std::list< std::string >::const_iterator arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  arg6 = (bool)larg6;
  try {
    (arg1)->regexps_to_predicate((std::string const &)*arg2,arg3,arg4,arg5,arg6);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_report_t_regexps_to_predicate__SWIG_2 (ledger::report_t *larg1, std::string *larg2, std::list< std::string >::const_iterator *larg3, std::list< std::string >::const_iterator *larg4, int larg5) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string >::const_iterator arg3 ;
  std::list< std::string >::const_iterator arg4 ;
  bool arg5 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  arg5 = (bool)larg5;
  try {
    (arg1)->regexps_to_predicate((std::string const &)*arg2,arg3,arg4,arg5);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_report_t_regexps_to_predicate__SWIG_3 (ledger::report_t *larg1, std::string *larg2, std::list< std::string >::const_iterator *larg3, std::list< std::string >::const_iterator *larg4) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string >::const_iterator arg3 ;
  std::list< std::string >::const_iterator arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  try {
    (arg1)->regexps_to_predicate((std::string const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT void _wrap_report_t_process_options (ledger::report_t *larg1, std::string *larg2, strings_list::iterator *larg3, strings_list::iterator *larg4) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string *arg2 = 0 ;
  strings_list::iterator arg3 ;
  strings_list::iterator arg4 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = *larg3;
  arg4 = *larg4;
  try {
    (arg1)->process_options((std::string const &)*arg2,arg3,arg4);
    
  } catch (...) {
    
  }
}


EXPORT item_handler< transaction_t > *_wrap_report_t_chain_xact_handlers (ledger::report_t *larg1, std::string *larg2, item_handler< transaction_t > *larg3, journal_t *larg4, account_t *larg5, std::list< item_handler< transaction_t > * > *larg6) {
  item_handler< transaction_t > * lresult = (item_handler< transaction_t > *)0 ;
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  std::string *arg2 = 0 ;
  item_handler< transaction_t > *arg3 = (item_handler< transaction_t > *) 0 ;
  journal_t *arg4 = (journal_t *) 0 ;
  account_t *arg5 = (account_t *) 0 ;
  std::list< item_handler< transaction_t > * > *arg6 = 0 ;
  item_handler< transaction_t > *result = 0 ;
  
  arg1 = larg1;
  arg2 = larg2;
  arg3 = larg3;
  arg4 = larg4;
  arg5 = larg5;
  arg6 = larg6;
  try {
    result = (item_handler< transaction_t > *)(arg1)->chain_xact_handlers((std::string const &)*arg2,arg3,arg4,arg5,*arg6);
    lresult = result;
    return lresult;
  } catch (...) {
    return (item_handler< transaction_t > *)0;
  }
}


EXPORT void _wrap_delete_report_t (ledger::report_t *larg1) {
  ledger::report_t *arg1 = (ledger::report_t *) 0 ;
  
  arg1 = larg1;
  try {
    delete arg1;
    
  } catch (...) {
    
  }
}



#endif // _REPORT_H
  
